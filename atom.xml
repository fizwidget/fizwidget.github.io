<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[fizwidget]]></title>
  <link href="http://fizwidget.github.io/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-06T10:14:53+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implicit Futures]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/06/implicit-futures/"/>
    <updated>2014-07-06T02:20:05+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/06/implicit-futures</id>
    <content type="html"><![CDATA[<p>It&rsquo;s so damn easy in Ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Future</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@thread</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yay Ruby!]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/05/yay-ruby/"/>
    <updated>2014-07-05T22:10:23+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/05/yay-ruby</id>
    <content type="html"><![CDATA[<p>Python and Ruby are the two heavyweights in the general-purpose, high-level, dynamic language category. They&rsquo;re both awesome languages, but given the choice, I&rsquo;ll generally go with Ruby. This is my attempt at explaining why.</p>

<!-- more -->


<h2>Ruby is consistently object-oriented</h2>

<p>Pretty much everything we do in Ruby involves calling methods on objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="mi">42</span><span class="o">.</span><span class="n">abs</span>               <span class="c1"># =&gt; 42</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">length</span>      <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reverse</span>     <span class="c1"># =&gt; [3, 2, 1]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reverse!</span>    <span class="c1"># Reverses list in-place.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">min</span>         <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">capitalize</span>      <span class="c1"># =&gt; &quot;Foo&quot;</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">)</span>       <span class="c1"># =&gt; File object</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>            <span class="c1"># Closes file object.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python though, we use a mixture of functions and methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">42</span><span class="p">)</span>              <span class="c"># =&gt; 42</span>
</span><span class='line'><span class="nb">len</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>        <span class="c"># =&gt; 3</span>
</span><span class='line'><span class="nb">reversed</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>   <span class="c"># =&gt; [3, 2, 1]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>   <span class="c"># Reverses list in-place.</span>
</span><span class='line'><span class="nb">min</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>        <span class="c"># =&gt; 1</span>
</span><span class='line'><span class="s">&quot;foo&quot;</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span>    <span class="c"># =&gt; &quot;Foo&quot;</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s">&quot;bar&quot;</span><span class="p">)</span>           <span class="c"># =&gt; File object</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>          <span class="c"># Closes file object.</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the benefits of Ruby&rsquo;s consistency is that we can always read it left-to-right:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;world hello&quot;</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The equivalent Python code is much harder to make sense of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="s">&quot;world hello&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span> <span class="c"># =&gt; &quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have to read some parts left-to-right and other parts inside-out. Yuk.</p>

<h2>Blocks are brilliant</h2>

<p>One of Ruby&rsquo;s best features is the really nice syntax it has for passing anonymous functions (&ldquo;blocks&rdquo;) as arguments to methods. Blocks are like Python&rsquo;s lambda expressions, only more elegant, more powerful, and more commonly used.</p>

<p>Blocks allow us to perform many different tasks using a simple, uniform syntax. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">each</span>   <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>         <span class="c1"># Iteration using blocks.</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">)</span>   <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>    <span class="c1"># Automatic resource management using blocks.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">}</span>          <span class="c1"># List processing using blocks.</span>
</span><span class='line'><span class="n">data</span><span class="o">.</span><span class="n">sort_by</span>     <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">}</span>           <span class="c1"># Sorting using blocks.</span>
</span><span class='line'><span class="n">files</span><span class="o">.</span><span class="n">lazy</span><span class="o">.</span><span class="n">map</span>   <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>   <span class="c1"># Lazy evaluation using blocks.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python, we use no fewer than five different language constructs to perform the same tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>            <span class="c"># Iteration using &#39;for&#39;.</span>
</span><span class='line'><span class="k">with</span> <span class="n">f</span> <span class="k">as</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;n&#39;</span><span class="p">):</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>    <span class="c"># Automatic resource management using &#39;with&#39;.</span>
</span><span class='line'><span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">]</span>         <span class="c"># List processing using list comprehensions.</span>
</span><span class='line'><span class="nb">sorted</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>        <span class="c"># Sorting using &#39;lambda&#39;.</span>
</span><span class='line'><span class="p">(</span><span class="n">Image</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">)</span>               <span class="c"># Lazy evaluation using generator expressions.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my book, one flexible construct > multiple rigid constructs.</p>

<h2>Clear conditionals</h2>

<p>Pretty much everything with a length/size/magnitude of zero evaluates to false in Python. This isn&rsquo;t just a quirk of the language, it&rsquo;s promoted in <a href="http://legacy.python.org/dev/peps/pep-0008/">PEP 8</a> as the Pythonic way of doing things.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">some_collection</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Whatever happened to &quot;explicit is better than implicit&quot;??</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Ruby, <code>false</code> and <code>nil</code> are the only values that evaluate to false. This means we have to explicitly ask objects questions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">some_collection</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="c1"># Obvious meaning is obvious.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby&rsquo;s approach seems both more readable and less error-prone.</p>

<h2>Private parts</h2>

<p>In Ruby, instance variables are private by default. This encourages proper encapsulation of implementation details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@secret</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">secret</span> <span class="c1"># =&gt; Error!</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python though, everything defaults to public. This means we&rsquo;re more likely to end up with dependencies on implementation details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">not_so_secret</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>
</span><span class='line'><span class="n">Foo</span><span class="p">()</span><span class="o">.</span><span class="n">not_so_secret</span> <span class="c"># =&gt; 42</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ruby is pretty</h2>

<p>OK, I&rsquo;ll admit this is ever so slightly subjective. Having said that, compare this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;Person is </span><span class="si">#{</span><span class="vi">@age</span><span class="si">}</span><span class="s2"> years old.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">person</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Person is {} years old.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Ruby code has fewer parentheses, colons, and underscores, and doesn&rsquo;t need to specify <code>object</code>, <code>self</code>, or <code>return</code>.</p>

<h2>Conclusion</h2>

<p>So that&rsquo;s why I like Ruby. Admittedly this was a rather one sided comparison &ndash; Ruby has plenty of issues and Python plenty of benefits that I neglected to mention. Perhaps that&rsquo;ll be the topic of a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Pipelines]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/05/functional-pipelines/"/>
    <updated>2014-07-05T12:45:10+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/05/functional-pipelines</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s say we&rsquo;ve got a list of student objects, and we want to get the ID numbers of the 10 youngest first-year students. Perhaps to send them a survey or something. I dunno.</p>

<p>The point is, how do we do it? If you&rsquo;d asked me a few years ago, I probably would&rsquo;ve written something horrible like this:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">youngest_ids</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="n">youngest_to_oldest</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">age</span> <span class="p">}</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">student</span> <span class="k">in</span> <span class="n">youngest_to_oldest</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">student</span><span class="o">.</span><span class="n">level</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">youngest_ids</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">student</span><span class="o">.</span><span class="n">id_number</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">10</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">youngest_ids</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you asked me today, I&rsquo;d write something more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">students</span><span class="o">.</span><span class="n">select</span>  <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">level</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">age</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">id_number</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a much, much better approach. The main difference is that it&rsquo;s declarative rather than imperative. We&rsquo;re describing what we want, rather than spelling out exactly how to achieve it. This approach is easier to understand, easier to modify, less error-prone, more concise, and has the <em>potential</em> to perform better (the system could, for example, distribute the <code>select</code> operation over multiple cores).</p>

<p>I&rsquo;ve used Ruby in the above example, but you can write this kind of code in many different languages (Python, C#, and Java 8 to name a few of the more popular ones). You might also notice similarities to SQL &ndash; this is no coincidence, as SQL is also a declarative language.</p>

<p>So go forth and be functional!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nothin' but Single-Argument Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/04/nothin-but-single-argument-functions/"/>
    <updated>2014-07-04T09:17:13+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/04/nothin-but-single-argument-functions</id>
    <content type="html"><![CDATA[<p>In a <a href="http://fizwidget.github.io/blog/2014/07/03/nothin-but-functions/">previous post</a>, I talked about the fact that functions are the only thing a language needs to be Turing-complete. In this post I&rsquo;ll take it a little further: <em>single-argument functions</em> are all a language needs to be Turing-complete.</p>

<p>At first glance this seems counter-intuitive. Surely there are a <em>lot</em> of things we wouldn&rsquo;t be able to do&hellip;adding two numbers, comparing two strings, searching for a number in a list, etc. These functions would all require more than one argument.</p>

<!-- more -->


<p>If you read my previous post on functions, you might be thinking we could pass around linked lists to simulate multiple arguments. There&rsquo;s one problem with that though&hellip;the <code>make_list</code> function accepts two arguments. We can&rsquo;t use a function that takes multiple arguments to implement multi-argument functions. That&rsquo;d be assuming what we want to prove.</p>

<h2>Closures to the rescue</h2>

<p>Remember closures? In addition to their arguments, they can access variables from their enclosing scope. Turns out we can use this ability to simulate multi-argument functions. Let&rsquo;s try writing a function to concatenate two strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">concatenate</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">concatenate_aux</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">concatenate_aux</span>
</span><span class='line'>
</span><span class='line'><span class="n">concatenate</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)(</span><span class="s">&quot;World&quot;</span><span class="p">)</span> <span class="c"># =&gt; &quot;HelloWorld&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>(Ignore the fact that I&rsquo;ve implemented concatenation with <code>+</code>, which is essentially a multi-argument function. That&rsquo;s just for brevity.)</em></p>

<p>Tada! The top-level <code>concatenate</code> function returns another function, which returns the final result when called. The <code>concatenate_aux</code> function is a closure, meaning it still has access to <code>a</code> when we call it later on.</p>

<p>So, we can decompose an n-argument function into a series of n nested single-argument functions (this is known as <a href="http://en.wikipedia.org/wiki/Currying">currying</a>).</p>

<p>This opens up another interesting possibility&hellip;</p>

<h2>Partial function application</h2>

<p>If a function takes n arguments, we usually have to call it with n arguments (anything less results in an error). If we define functions like we did above though, we can <em>partially apply</em> them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">greet</span> <span class="o">=</span> <span class="n">concatenate</span><span class="p">(</span><span class="s">&quot;Hello &quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve now got a new function (an instance of <code>concatenate_aux</code>) that will prepend <code>"Hello "</code> to whatever we give it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">greet</span><span class="p">(</span><span class="s">&quot;Fred&quot;</span><span class="p">)</span> <span class="c"># =&gt; &quot;Hello Fred&quot;</span>
</span><span class='line'><span class="n">greet</span><span class="p">(</span><span class="s">&quot;Bob&quot;</span><span class="p">)</span>  <span class="c"># =&gt; &quot;Hello Bob&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can actually be a useful technique. The way we did it above is kinda messy, but Python has a <a href="https://docs.python.org/3/library/functools.html#functools.partial">library function</a> that simplifies the process. Some languages make things even easier, and allow any function to be partially applied without us having to do any extra work. Partial application is quite common in Haskell for example.</p>

<h2>Conclusion</h2>

<ul>
<li>Single-argument functions are all a language needs to be Turing-complete.</li>
<li>Partial function application lets us build specialised functions out of more general ones.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nothin' but Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/03/nothin-but-functions/"/>
    <updated>2014-07-03T16:59:34+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/03/nothin-but-functions</id>
    <content type="html"><![CDATA[<p>Imagine we&rsquo;re using a programming language that doesn&rsquo;t give us any way of defining data structures. No arrays, no structs, no classes. Nothing. All we can do is define and call functions.</p>

<p>We need to work with a collection of items. Are we screwed?</p>

<!-- more -->


<h2>A list made of functions</h2>

<p>Turns out the answer is no. We can create linked lists, quite literally, out of functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">make_list</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">tail</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">node</span><span class="p">(</span><span class="n">operation</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">&quot;head&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">head</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">&quot;tail&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">tail</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">node</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>make_list</code> function accepts a <code>head</code> (the data item we want to store), and a <code>tail</code> (the next node in the list). We can use it to construct the list <code>[1, 2, 3]</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">items</span> <span class="o">=</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="bp">None</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we call <code>make_list</code>, it returns an instance of the <code>node</code> function. This function accepts a single argument and returns the head or the tail based on the value of that argument.</p>

<p>Let&rsquo;s give it a try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">items</span>                         <span class="c"># =&gt; &lt;function make_node.&lt;locals&gt;.node at 0x10987e598&gt;</span>
</span><span class='line'><span class="n">items</span><span class="p">(</span><span class="s">&quot;head&quot;</span><span class="p">)</span>                 <span class="c"># =&gt; 1</span>
</span><span class='line'><span class="n">items</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)</span>                 <span class="c"># =&gt; &lt;function make_node.&lt;locals&gt;.node at 0x10987e620&gt;</span>
</span><span class='line'><span class="n">items</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;head&quot;</span><span class="p">)</span>         <span class="c"># =&gt; 2</span>
</span><span class='line'><span class="n">items</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;head&quot;</span><span class="p">)</span> <span class="c"># =&gt; 3</span>
</span><span class='line'><span class="n">items</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)</span> <span class="c"># =&gt; None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Neat! We can see that both <code>items</code> and <code>items("tail")</code> are instances of the <code>node</code> function, and that <code>items("head")</code> returns the value we stored in the first node.</p>

<p>Let&rsquo;s write a function to print the list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_list</span><span class="p">(</span><span class="n">items</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">items</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">items</span><span class="p">(</span><span class="s">&quot;head&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">print_list</span><span class="p">(</span><span class="n">items</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">print_list</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you&rsquo;d expect, it prints out 1 2 3.</p>

<h2>Closures</h2>

<p>A closure is a function that has access to the variables from the scope it was defined in. The <code>node</code> function is a good example of this: it accesses <code>head</code> and <code>tail</code>. These variables aren&rsquo;t explicitly passed in as arguments, but <code>node</code> can access them all the same. Each time we call <code>make_list</code>, a new instance of <code>node</code> is returned that references the new <code>head</code> and <code>tail</code> arguments.</p>

<p>Our list is nothing more than a chain of nested closures. When we call the outermost closure and pass it <code>"tail"</code> as an argument, it returns the next closure in the chain (i.e. the next node in the list).</p>

<h2>Conclusion</h2>

<p>We&rsquo;ve really just scratched the surface here &ndash; it&rsquo;s not hard to see that we could create more complex data structures using similar techniques. We could even use functions to define <em>numbers</em> by representing the <em>n</em>th integer as a series of <em>n</em> nested functions.</p>

<p>This all hints at a deeper fact: if a language allows you to define and apply functions, that language is Turing-complete (meaning it lets you compute anything that can be computed). The <a href="http://palmstroem.blogspot.com.au/2012/05/lambda-calculus-for-absolute-dummies.html">lambda calculus</a> is the canonical example of such a language.</p>

<p>Neat, huh?</p>
]]></content>
  </entry>
  
</feed>
