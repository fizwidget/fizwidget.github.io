<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[fizwidget]]></title>
  <link href="http://fizwidget.github.io/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-28T08:21:15+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Pipelines]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/27/functional-pipelines/"/>
    <updated>2014-07-27T12:45:10+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/27/functional-pipelines</id>
    <content type="html"><![CDATA[<p>The concept of pipelining is pretty simple &ndash; components are connected in series such that the output from one flows into the input of the next. Piping data in shell scripts is an example most programmers are familiar with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat logs <span class="p">|</span> grep <span class="s1">&#39;ERROR&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/color/colour/g&#39;</span> <span class="p">|</span> sort <span class="p">|</span> uniq
</span></code></pre></td></tr></table></div></figure>


<p>This style of programming doesn&rsquo;t have to be relegated to shell scripts though &ndash; it&rsquo;s a universal concept that can help us write better code in many different languages. Instead of piping data from one program to another, we&rsquo;ll compose functions (or equivalently, chain methods).</p>

<!-- more -->


<p>Let&rsquo;s jump straight into some Ruby examples, then I&rsquo;ll discuss how these ideas apply to other languages.</p>

<h2>Example 1</h2>

<p>Say we&rsquo;ve got a list of student objects, and we want to get the email addresses of the ten youngest third-year compsci students (perhaps to send them a survey or something). Using a traditional imperative approach, we might write something along these lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Select all the third-year CS students.</span>
</span><span class='line'><span class="n">third_year_cs_students</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">student</span> <span class="k">in</span> <span class="n">students</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">student</span><span class="o">.</span><span class="n">level</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">student</span><span class="o">.</span><span class="n">degree</span> <span class="o">==</span> <span class="ss">:comp_sci</span>
</span><span class='line'>    <span class="n">third_year_cs_students</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">student</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Take the 10 youngest of these students.</span>
</span><span class='line'><span class="n">third_year_cs_students</span><span class="o">.</span><span class="n">sort_by!</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:age</span><span class="p">)</span>
</span><span class='line'><span class="n">youngest_third_year_cs_students</span> <span class="o">=</span> <span class="n">third_year_cs_students</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Collect their email addresses.</span>
</span><span class='line'><span class="n">emails</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">student</span> <span class="k">in</span> <span class="n">youngest_third_year_cs_students</span>
</span><span class='line'>  <span class="n">email</span> <span class="o">=</span> <span class="n">student</span><span class="o">.</span><span class="n">email_address</span>
</span><span class='line'>  <span class="n">emails</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">emails</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but it&rsquo;s quite verbose, and it&rsquo;s not particularly easy to understand or modify.</p>

<p>Let&rsquo;s instead try structuring our solution as a pipeline. We can translate the problem description almost directly into code by chaining together methods from Ruby&rsquo;s <a href="http://www.ruby-doc.org/core-2.1.1/Enumerable.html"><code>Enumerable</code></a> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">students</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">level</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">degree</span> <span class="o">==</span> <span class="ss">:comp_sci</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:age</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>        <span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:email_address</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is clearly a big improvement. It&rsquo;s concise, easy to understand, and easy to modify. It also has the potential to run more efficiently, as the <code>select</code> and <code>collect</code> operations could potentially be distributed over multiple cores.</p>

<p>A key thing to note is that none of these methods are modifying the objects they&rsquo;re called on. They&rsquo;re instead applying some kind of filter or transformation, then outputting a new sequence to the next stage of the pipeline.</p>

<p>It&rsquo;s also worth pointing out that we can use intermediate variables and/or helper methods if we wish &ndash; the code doesn&rsquo;t <em>have</em> to be an unbroken chain of method calls. So long as we cleanly separate the stages and avoid mutating state (reassigning variables, appending to lists, etc), we&rsquo;re still using a pipelined approach.</p>

<h2>Example 2</h2>

<p>In this example, we want to get the extensions of the smallest file and the largest file in a directory. If the smallest file was a text document and the largest a video, <code>[".txt", ".mkv"]</code> might be the output.</p>

<p>Here&rsquo;s our first implementation attempt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">min_extension</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">max_extension</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">min_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">max_size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">foreach</span><span class="p">(</span><span class="n">dir_path</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">size</span> <span class="o">&lt;</span> <span class="n">min_size</span> <span class="o">||</span> <span class="n">min_extension</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">min_extension</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">min_size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="n">max_size</span> <span class="o">||</span> <span class="n">max_extension</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">max_extension</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">max_size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="o">[</span><span class="n">min_extension</span><span class="p">,</span> <span class="n">max_extension</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Conceptually, there are four stages to the computation: list all directory entries, select the entries that correspond to files, select the smallest and largest of these files, and lastly, get their extensions. In the code above, these stages are all intermingled. This makes it hard to understand and limits the reusability of the logic.</p>

<p>Taking a pipelined approach with <code>Enumerable</code> methods, we can cleanly separate the stages and reuse existing logic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="n">dir_path</span><span class="p">)</span>
</span><span class='line'>   <span class="o">.</span><span class="n">select</span>    <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>   <span class="o">.</span><span class="n">minmax_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>   <span class="o">.</span><span class="n">collect</span>   <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much nicer!</p>

<h2>In other languages</h2>

<p>The examples above are written in Ruby, but the concepts are universal. In Python, list comprehensions, generator expressions, the <code>itertools</code> module, and built-in functions like <code>map</code> and <code>filter</code> all come in handy. In Java 8, the Streams API provides the equivalent toolset. In C#, check out <code>Enumerable</code> and LINQ. Odds are, your language of choice supports these concepts in one form or another. In some cases, cool things like parallel execution or lazy evaluation of pipelines are also supported.</p>

<p>This style of coding has its roots in functional programming, and it&rsquo;s the standard way of doing things in languages like Haskell and Scheme. There are also obvious similarities to SQL. This is no coincidence, as functional languages and SQL are both <a href="http://en.wikipedia.org/wiki/Declarative_programming">declarative</a> rather than <a href="http://en.wikipedia.org/wiki/Imperative_programming">imperative</a> in nature (meaning we describe <em>what</em> we want rather than spell out exactly <em>how</em> to achieve it).</p>

<h2>Conclusion</h2>

<p>The next time you find yourself writing loops and if-statements, consider whether a functional pipelined approach would be more appropriate. Once you&rsquo;re familiar with this style of programming, you&rsquo;ll see lots of opportunities to make your code simpler and more robust.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python or Ruby?]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/25/python-or-ruby/"/>
    <updated>2014-07-25T22:10:23+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/25/python-or-ruby</id>
    <content type="html"><![CDATA[<p>Python and Ruby are the two heavyweights in the general-purpose, high-level, dynamic language category. They&rsquo;re both awesome, but given the choice, I&rsquo;ll generally go with Ruby. This is my attempt at explaining why&hellip;</p>

<!-- more -->


<h2>Ruby is consistently object-oriented</h2>

<p>Pretty much everything we do in Ruby involves calling methods on objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="mi">42</span><span class="o">.</span><span class="n">abs</span>               <span class="c1"># =&gt; 42</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">length</span>      <span class="c1"># =&gt; 3</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reverse</span>     <span class="c1"># =&gt; [3, 2, 1]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">reverse!</span>    <span class="c1"># Reverses list in-place.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">min</span>         <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">capitalize</span>      <span class="c1"># =&gt; &quot;Foo&quot;</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">)</span>       <span class="c1"># =&gt; File object</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>            <span class="c1"># Closes file object.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python though, a mixture of functions and methods are typically used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">42</span><span class="p">)</span>              <span class="c"># =&gt; 42</span>
</span><span class='line'><span class="nb">len</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>        <span class="c"># =&gt; 3</span>
</span><span class='line'><span class="nb">reversed</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>   <span class="c"># =&gt; [3, 2, 1]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>   <span class="c"># Reverses list in-place.</span>
</span><span class='line'><span class="nb">min</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>        <span class="c"># =&gt; 1</span>
</span><span class='line'><span class="s">&quot;foo&quot;</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span>    <span class="c"># =&gt; &quot;Foo&quot;</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s">&quot;bar&quot;</span><span class="p">)</span>           <span class="c"># =&gt; File object</span>
</span><span class='line'><span class="nb">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>          <span class="c"># Closes file object.</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the benefits of Ruby&rsquo;s consistency is that we can always read code left-to-right. This makes functional-style pipelines much easier to read and write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;world hello&quot;</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The equivalent Python code is much harder to make sense of. We have to read some parts left-to-right and other parts inside-out. Yuk!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="s">&quot;world hello&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">()))</span> <span class="c"># =&gt; &quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Blocks are awesome</h2>

<p>One of Ruby&rsquo;s best features is the elegant syntax it has for passing anonymous functions (&ldquo;blocks&rdquo;) as arguments to methods. Blocks are like Python&rsquo;s lambda expressions, only more powerful, more widely used, and visually cleaner.</p>

<p>Blocks allow us to perform many different tasks using a single uniform syntax. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">each</span>   <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span>         <span class="c1"># Iteration using blocks.</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>   <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>    <span class="c1"># Automatic resource management using blocks.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="p">}</span>          <span class="c1"># List processing using blocks.</span>
</span><span class='line'><span class="n">data</span><span class="o">.</span><span class="n">sort_by</span>     <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">foo</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">}</span>     <span class="c1"># Sorting using blocks.</span>
</span><span class='line'><span class="n">urls</span><span class="o">.</span><span class="n">lazy</span><span class="o">.</span><span class="n">map</span>    <span class="p">{</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span> <span class="n">download</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> <span class="p">}</span>    <span class="c1"># Lazy evaluation using blocks.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python, we&rsquo;d typically use no fewer than <em>five</em> language constructs to perform the same tasks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>            <span class="c"># Iteration using &#39;for&#39;.</span>
</span><span class='line'><span class="k">with</span> <span class="n">f</span> <span class="k">as</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">):</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>    <span class="c"># Automatic resource management using &#39;with&#39;.</span>
</span><span class='line'><span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">]</span>         <span class="c"># List processing using list comprehensions.</span>
</span><span class='line'><span class="nb">sorted</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">foo</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>  <span class="c"># Sorting using &#39;lambda&#39;.</span>
</span><span class='line'><span class="p">(</span><span class="n">download</span><span class="p">(</span><span class="n">u</span><span class="p">)</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">)</span>             <span class="c"># Lazy evaluation using generator expressions.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another thing to note is that Python&rsquo;s lambdas are restricted to a single expression, whereas blocks can be as large as we need them to be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;World&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;...&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Bye!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One flexible construct > multiple rigid constructs in my book!</p>

<h2>Clear conditionals</h2>

<p>In Python, empty collections, empty strings, and certain other objects are treated as being logically false. This isn&rsquo;t just a quirk of the language, it&rsquo;s promoted in <a href="http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations">PEP 8</a> as the Pythonic way of checking for empty sequences. In addition to this, zero is treated false and non-zero numbers as true.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">some_sequence</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Whatever happened to &quot;explicit is better than implicit&quot;??</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">some_number</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Admittedly this one isn&#39;t very Pythonic, but it does work.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby doesn&rsquo;t allow these shenanigans, so the equivalent code has to be much more explicit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">some_sequence</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="c1"># Obvious meaning is obvious.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">unless</span> <span class="n">some_number</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>  <span class="c1"># Could use &#39;if some_number != 0&#39;, but this is nicer ;)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s also worth noting that we can use <code>unless</code> and <code>until</code> in Ruby instead of <code>if not</code> and <code>while not</code> in Python. Method names can also include the &lsquo;?&rsquo; character, further improving readability. Compare this Python snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">while</span> <span class="ow">not</span> <span class="nb">buffer</span><span class="o">.</span><span class="n">is_full</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># Add data to buffer.</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this Ruby one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">until</span> <span class="n">buffer</span><span class="o">.</span><span class="n">full?</span>
</span><span class='line'>  <span class="c1"># Add data to buffer.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The former is quite clunky, but the latter almost reads as English prose!</p>

<h2>Private parts</h2>

<p>Instance variables are private by default in Ruby, which encourages proper encapsulation of implementation details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@secret</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">secret</span> <span class="c1"># =&gt; Error!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything defaults to public in Python, and privacy can only be suggested by naming conventions. This means we&rsquo;re more likely to end up with inappropriate dependencies on implementation details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">not_so_secret</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>
</span><span class='line'><span class="n">Foo</span><span class="p">()</span><span class="o">.</span><span class="n">not_so_secret</span> <span class="c"># =&gt; 42</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby&rsquo;s approach seems the wiser one to me. Encapsulation is a Good Idea™, so why shouldn&rsquo;t the language support and encourage it?</p>

<p><em>(By the way, Ruby&rsquo;s approach doesn&rsquo;t result in C++/Java-style boilerplate. We can generate default getters/setters by placing <code>attr_accessor :property_name</code> in the class body, and override them later if need be.)</em></p>

<h2>Ruby&rsquo;s pretty!</h2>

<p>OK, I&rsquo;ll admit this one is ever so slightly subjective. Having said that, compare this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="s2">&quot;Person is </span><span class="si">#{</span><span class="vi">@age</span><span class="si">}</span><span class="s2"> years old.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">person</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Person is {} years old.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Ruby code has fewer parentheses, colons, and underscores, and doesn&rsquo;t need to specify <code>object</code>, <code>self</code>, or <code>return</code>. Python&rsquo;s whitespace sensitivity does allow it to omit <code>end</code>, but this doesn&rsquo;t make up for all the other clutter in my opinion.</p>

<h2>Naming and documentation</h2>

<p>The naming conventions used in Python&rsquo;s standard library are a bit of a mess (even <a href="http://legacy.python.org/dev/peps/pep-0008/#naming-conventions">PEP 8</a> admits as much). Ruby&rsquo;s standard library is much more consistent in comparison.</p>

<p>In terms of documentation quality, Ruby also has the edge. Descriptions are clearer and more detailed, and usage examples are almost always given. Consider the documentation for <code>str.capitalize</code> in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.capitalize = capitalize(...)
</span><span class='line'>    S.capitalize() -&gt; string
</span><span class='line'>    
</span><span class='line'>    Return a copy of the string S with only its first character
</span><span class='line'>    capitalized.</span></code></pre></td></tr></table></div></figure>


<p>Then compare it with Ruby&rsquo;s <code>String#capitalize</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>= String#capitalize
</span><span class='line'>
</span><span class='line'>(from ruby core)
</span><span class='line'>------------------------------------------------------------------------------
</span><span class='line'>  str.capitalize   -&gt; new_str
</span><span class='line'>
</span><span class='line'>------------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>Returns a copy of str with the first character converted to uppercase
</span><span class='line'>and the remainder to lowercase. Note: case conversion is effective only in
</span><span class='line'>ASCII region.
</span><span class='line'>
</span><span class='line'>  "hello".capitalize    #=&gt; "Hello"
</span><span class='line'>  "HELLO".capitalize    #=&gt; "Hello"
</span><span class='line'>  "123ABC".capitalize   #=&gt; "123abc"</span></code></pre></td></tr></table></div></figure>


<p>Unless you were paying close attention, you might have missed the fact that <code>str.capitalize</code> converts the remainder of the string to lowercase (e.g. &ldquo;ABC&rdquo; goes to &ldquo;Abc&rdquo;). The Ruby documentation makes this behaviour much more obvious, and gives clarifying examples.</p>

<p>This is just one example of course, but these kinds of differences are not atypical in my experience.</p>

<h2>Conclusion</h2>

<p>So those are a few of the reasons why I prefer Ruby to Python. Admittedly this was a rather one sided comparison &ndash; Ruby has plenty of downsides and Python plenty of upsides that I neglected to mention. Perhaps those will be the topic of a future post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implicit Futures in Ruby]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/06/implicit-futures-in-ruby/"/>
    <updated>2014-07-06T02:20:05+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/06/implicit-futures-in-ruby</id>
    <content type="html"><![CDATA[<p>Say we&rsquo;re writing a program that performs several time-consuming operations, like network requests, disk accesses, or complex calculations. We want them to execute concurrently, but we also want our code to remain simple and easy to understand. There are many different ways of approaching this problem, but in this post I&rsquo;ll focus on <em>implicit futures</em> and how they can be implemented in Ruby.</p>

<!-- more -->


<p>This code demonstrates the type of scenario we&rsquo;re dealing with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">foo</span><span class="o">.</span><span class="n">expensive_call_1</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">bar</span><span class="o">.</span><span class="n">expensive_call_2</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">baz</span><span class="o">.</span><span class="n">expensive_call_3</span>
</span><span class='line'>
</span><span class='line'><span class="n">other_stuff</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">some_method</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We perform one or more time-consuming operations, potentially do something else, then use the results of the operations.</p>

<p>In the code above, the time-consuming operations are executed sequentially. This can result in very poor performance (e.g. CPU might be forced to sit idle while a network request completes). Also, the call to <code>other_stuff</code> won&rsquo;t begin running until all three of the previous calls have finished, even though it doesn&rsquo;t depend on their results.</p>

<p>This is the solution we&rsquo;re working towards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">future</span> <span class="p">{</span> <span class="n">foo</span><span class="o">.</span><span class="n">expensive_call_1</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">future</span> <span class="p">{</span> <span class="n">bar</span><span class="o">.</span><span class="n">expensive_call_2</span> <span class="p">}</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">future</span> <span class="p">{</span> <span class="n">baz</span><span class="o">.</span><span class="n">expensive_call_3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">other_stuff</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">some_method</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<em>If you&rsquo;re unfamiliar with Ruby, <code>foo { bar }</code> is equivalent to <code>foo(lambda: bar())</code> in Python</em>)</p>

<p>The expensive calls are now executed asynchronously, and <code>other_stuff</code> can begin running immediately. If line 7 is reached before all three results are available, the main thread will automatically block and wait for them to finish.</p>

<p>Nice! How on Earth can this be implemented though&hellip;? At first glance, it looks like we&rsquo;d need to modify the language itself. As we&rsquo;ll see, there&rsquo;s actually a much simpler approach.</p>

<h2>Threads in Ruby</h2>

<p>We&rsquo;ll use Ruby&rsquo;s <code>Thread</code> class to do most of the heavy-lifting. Here&rsquo;s a quick primer on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="c1"># =&gt; 4</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Thread.new</code> spawns a thread to execute the given code block, and <code>t.value</code> returns the thread&rsquo;s result (waiting for it to finish if necessary).</p>

<p>Let&rsquo;s rewrite our original code to use <code>Thread</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">foo</span><span class="o">.</span><span class="n">expensive_call_1</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">bar</span><span class="o">.</span><span class="n">expensive_call_2</span> <span class="p">}</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">baz</span><span class="o">.</span><span class="n">expensive_call_3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">other_stuff</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">some_method</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This almost gets us where we want to be, but not quite.</p>

<h2>Explicit vs implicit</h2>

<p>In the code above, we have to explicitly retrieve the results by calling <code>value</code> on the futures/threads. This means they&rsquo;re <em>explicit</em> futures rather than <em>implicit</em> ones.</p>

<p>This might not seem like much of an issue, but what if we wanted to pass one of the results on to another piece of code? We could either:</p>

<ol>
<li>Call <code>value</code> on the future, and pass along the result directly.</li>
<li>Pass along the future, and let the other piece of code call <code>value</code> when it needs the result.</li>
</ol>


<p>Neither of these options are very good. The first can result in suboptimal performance, because we&rsquo;re calling <code>value</code> before we really need to (remember that <code>value</code> might block execution if the result isn&rsquo;t ready yet). The second option limits the reusability of the other piece of code, as it will now only be able to work with futures.</p>

<p>Implicit futures don&rsquo;t have either of these issues. The code that uses them can remain blissfully ignorant of the fact that they&rsquo;re futures, and no blocking will occur until the result is actually needed (i.e. a method is called on it).</p>

<h2>Delegating method calls</h2>

<p>To summarise what we&rsquo;re trying to achieve, we want the future object to behave as though it were the result object. When we call a method on it, it should delegate the call to the result (blocking if necessary until the result becomes available).</p>

<p>It&rsquo;s not immediately obvious how methods can be delegated like this. The future should be able to work with all types of result objects, so we don&rsquo;t know in advance which methods need forwarding.</p>

<p>Ruby has a rather interesting feature called <code>method_missing</code> that comes in handy here. Calling a non-existent method would normally result in an error, but if we define a method called <code>method_missing</code>, Ruby will call that instead.</p>

<p>Here&rsquo;s a quick demo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Useless</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Someone called &#39;</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2">&#39; on me.&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I was given arguments: </span><span class="si">#{</span><span class="n">args</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Now let&#39;s call the block I was given:&quot;</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">u</span> <span class="o">=</span> <span class="no">Useless</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">u</span><span class="o">.</span><span class="n">this_is_weird!</span><span class="p">(</span><span class="s2">&quot;yup&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;I don&#39;t even...&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Someone called 'this_is_weird!' on me.
</span><span class='line'>I was given arguments: ["yup"]
</span><span class='line'>Now let's call the block I was given:
</span><span class='line'>I don't even...</span></code></pre></td></tr></table></div></figure>


<p>Our future class can use <code>method_missing</code> to intercept method calls. However, it still needs to actually forward the intercepted methods to the result. This can be done using <code>send</code>, which lets us dynamically call any method on an object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Putting it all together</h2>

<p>We now have everything we need to implement implicit futures. We can define a <code>Future</code> class that:</p>

<ol>
<li>Uses <code>Thread</code> to:

<ul>
<li>Asynchronously compute the result.</li>
<li>Block execution if the result is requested before it&rsquo;s ready.</li>
</ul>
</li>
<li>Uses <code>method_missing</code> and <code>send</code> to delegate all method calls to the result.</li>
</ol>


<p>The code ends up being very simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Future</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="vi">@thread</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a future is created, a thread is immediately spawned to execute the given code block. When a method is called on the future, it simply forwards it to <code>@thread.value</code> (which will block execution if the thread hasn&rsquo;t finished running yet).</p>

<p>To make it slightly easier to use, we&rsquo;ll define a standalone <code>future</code> function that creates and returns a <code>Future</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">future</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Future</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now create futures like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">future</span> <span class="p">{</span> <span class="n">expensive_call</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks exactly like what we set out to achieve! Might be a good idea to check if it works though&hellip;</p>

<h2>Testing!</h2>

<p>Let&rsquo;s start with a quick sanity-check. To mimic an expensive operation, I&rsquo;ve placed a call to <code>sleep</code> in the code given to the future:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">future</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Future: Started.&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Future: Finished.&quot;</span>
</span><span class='line'>  <span class="s2">&quot;I&#39;m the result!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Attempting to use the result.&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">upcase</span>
</span></code></pre></td></tr></table></div></figure>


<p>The call to <code>f.upcase</code> should cause the main thread to block for several seconds until the result is ready. If we run the code, this is exactly what we see happen. Here&rsquo;s the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Future: Started.
</span><span class='line'>Attempting to use the result.
</span><span class='line'>Future: Finished.
</span><span class='line'>I'M THE RESULT!</span></code></pre></td></tr></table></div></figure>


<p>It worked!</p>

<p>Now let&rsquo;s try more realistic example. We&rsquo;ll download a bunch of webpages and record how long it takes, with and without futures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="s2">&quot;https://www.google.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://www.microsoft.com&quot;</span><span class="p">,</span> <span class="s2">&quot;http://www.abc.net.au&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;http://www.reddit.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://www.atlassian.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://duckduckgo.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://www.facebook.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://www.ruby-lang.org&quot;</span><span class="p">,</span> <span class="s2">&quot;http://whirlpool.net.au&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://bitbucket.org&quot;</span><span class="p">,</span> <span class="s2">&quot;https://github.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://news.ycombinator.com&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">download_with_futures</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pages</span> <span class="o">=</span> <span class="n">urls</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>    <span class="n">future</span> <span class="p">{</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># For the purposes of the benchmark, wait until all downloads have</span>
</span><span class='line'>  <span class="c1"># finished by calling a method on each future.</span>
</span><span class='line'>  <span class="n">pages</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">page</span><span class="o">|</span> <span class="n">page</span><span class="o">.</span><span class="n">length</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">download_without_futures</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
</span><span class='line'>  <span class="n">urls</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">report</span> <span class="p">{</span> <span class="n">download_with_futures</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">report</span> <span class="p">{</span> <span class="n">download_without_futures</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the results are&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   user     system      total        real
</span><span class='line'>   0.160000   0.040000   0.200000 (  2.561927)
</span><span class='line'>   0.110000   0.030000   0.140000 ( 13.774315)</span></code></pre></td></tr></table></div></figure>


<p>13.8 seconds down to 2.6 seconds. Not bad!</p>

<h2>Caveats</h2>

<p>The <code>Future</code> class given above isn&rsquo;t exactly production-ready. If you were using it in a real project, you&rsquo;d want it to:</p>

<ul>
<li>Capture exceptions that occur during the thread&rsquo;s execution and re-throw them when the result is accessed.</li>
<li>Inherit from <code>BasicObject</code> instead of <code>Object</code>, so methods defined on <code>Object</code> are also delegated to the result.</li>
<li>Use a thread pool to prevent the system from being overloaded by a large number of threads.</li>
<li>Probably a bunch of other things I haven&rsquo;t thought of.</li>
</ul>


<p>A basic implementation in 9 lines of code isn&rsquo;t too shabby though!</p>

<h2>Conclusion</h2>

<p>Futures are awesome. Ruby is awesome. That is all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nothing but Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/03/nothing-but-functions/"/>
    <updated>2014-07-03T16:59:34+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/03/nothing-but-functions</id>
    <content type="html"><![CDATA[<p>Imagine we&rsquo;re using a programming language that doesn&rsquo;t give us any way of defining data structures. No arrays, no tuples, no structs, no classes. Nothing. All we can do is define and call functions.</p>

<p>Now imagine we need to work with a collection of items. Are we screwed?</p>

<!-- more -->


<h2>Building data structures out of functions</h2>

<p>It turns out we can create data structures, quite literally, out of functions. Here&rsquo;s a linked list in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">make_list</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">tail</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">node</span><span class="p">(</span><span class="n">operation</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">&quot;head&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">head</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">&quot;tail&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">tail</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">node</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>make_list</code> function accepts a <code>head</code> (the data item we want to store), and a <code>tail</code> (the next node in the list). It returns an instance of the <code>node</code> function, which in turn accepts a single argument and returns the head or tail of the list.</p>

<p>We can use <code>make_list</code> to construct the list <code>[1, 2, 3]</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">3</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try extracting the values from it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;head&quot;</span><span class="p">)</span>                 <span class="c"># =&gt; 1</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;head&quot;</span><span class="p">)</span>         <span class="c"># =&gt; 2</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;head&quot;</span><span class="p">)</span> <span class="c"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s take a look at the nodes themselves:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span>                         <span class="c"># =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d620&gt;</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)</span>                 <span class="c"># =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d510&gt;</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)</span>         <span class="c"># =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d488&gt;</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)</span> <span class="c"># =&gt; None</span>
</span></code></pre></td></tr></table></div></figure>


<p>We do indeed have a list made of functions (an immutable, singly-linked list to be precise).</p>

<p>It&rsquo;s a bit tedious to work with at the moment, but there&rsquo;s nothing stopping us from writing utility functions to work with it. Here&rsquo;s a function that prints it for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_list</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">lst</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">lst</span><span class="p">(</span><span class="s">&quot;head&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">print_list</span><span class="p">(</span><span class="n">lst</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Closures</h2>

<p>The <code>make_list</code> code only works because Python supports closures. A closure is, roughly speaking, a function that has access to the variables from the scope it was defined in. The <code>node</code> function is a good example of this: <code>head</code> and <code>tail</code> aren&rsquo;t explicitly passed in as arguments, but it&rsquo;s able to use them all the same. Each time we call <code>make_list</code>, a new instance of <code>node</code> is created that references the new versions of <code>head</code> and <code>tail</code>.</p>

<p>Our list is nothing more than a chain of nested closures. When we call the outermost closure and pass it <code>"tail"</code>, it returns the next closure in the chain (i.e. the next node in the list).</p>

<h2>Conclusion</h2>

<p>We&rsquo;ve really just scratched the surface here &ndash; it&rsquo;s not hard to see that more complex data structures could be defined using similar techniques. We could even use functions to define <em>numbers</em> by representing the nth integer as a series of n nested functions.</p>

<p>This is all hinting at a deeper fact: any language that allows us to define and apply functions is Turing-complete (meaning we can use it to compute <em>anything that can be computed</em>). This means that inbuilt constructs for arrays, classes, numbers, and even control structures are optional extras for a programming language!</p>

<p>Check out the <a href="http://palmstroem.blogspot.com.au/2012/05/lambda-calculus-for-absolute-dummies.html">lambda calculus</a> if this is even remotely interesting. Neat, huh?</p>
]]></content>
  </entry>
  
</feed>
