<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[fizwidget]]></title>
  <link href="http://fizwidget.github.io/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-08T09:20:06+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nothing but Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/06/nothing-but-functions/"/>
    <updated>2014-07-06T16:59:34+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/06/nothing-but-functions</id>
    <content type="html"><![CDATA[<p>Imagine we&rsquo;re using a programming language that doesn&rsquo;t give us any way of defining data structures. No arrays, no tuples, no structs, no classes. Nothing. All we can do is define and call functions.</p>

<p>Now imagine we need to work with a collection of items. Are we screwed?</p>

<!-- more -->


<h2>Building data structures from functions</h2>

<p>Turns out the answer is no. We can create data structures, quite literally, out of functions. Here&rsquo;s a linked list in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">make_list</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">tail</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">node</span><span class="p">(</span><span class="n">operation</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">&quot;head&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">head</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">operation</span> <span class="o">==</span> <span class="s">&quot;tail&quot;</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">tail</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">node</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>make_list</code> function accepts a <code>head</code> (the data item we want to store), and a <code>tail</code> (the next node in the list). It returns an instance of the <code>node</code> function, which in turn accepts a single argument and returns the head or tail of the list.</p>

<p>We can use <code>make_list</code> to construct the list <code>[1, 2, 3]</code> as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">make_list</span><span class="p">(</span><span class="mi">3</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try extracting the values from it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;head&quot;</span><span class="p">)</span>                 <span class="c"># =&gt; 1</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;head&quot;</span><span class="p">)</span>         <span class="c"># =&gt; 2</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;head&quot;</span><span class="p">)</span> <span class="c"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s take a look at the nodes themselves:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span>                         <span class="c"># =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d620&gt;</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)</span>                 <span class="c"># =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d510&gt;</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)</span>         <span class="c"># =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d488&gt;</span>
</span><span class='line'><span class="n">numbers</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)(</span><span class="s">&quot;tail&quot;</span><span class="p">)</span> <span class="c"># =&gt; None</span>
</span></code></pre></td></tr></table></div></figure>


<p>We do indeed have a list made of functions (an immutable, singly-linked list to be precise).</p>

<p>It&rsquo;s a bit tedious to work with at the moment, but there&rsquo;s nothing stopping us from writing utility functions to work with it. Here&rsquo;s a function that&rsquo;d print it for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">print_list</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">lst</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">lst</span><span class="p">(</span><span class="s">&quot;head&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">print_list</span><span class="p">(</span><span class="n">lst</span><span class="p">(</span><span class="s">&quot;tail&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s just as easy to work with as a normal linked list.</p>

<h2>Closures</h2>

<p>What we&rsquo;ve done above is only possible because Python supports <em>closures</em>. A closure is, roughly speaking, a function that has access to the variables from the scope it was defined in. The <code>node</code> function is a good example of this: <code>head</code> and <code>tail</code> aren&rsquo;t explicitly passed in as arguments, but it&rsquo;s able to use them all the same. Each time we call <code>make_list</code>, a new instance of <code>node</code> is created that references the new versions of <code>head</code> and <code>tail</code>.</p>

<p>Our list is nothing more than a chain of nested closures. When we call the outermost closure and pass it <code>"tail"</code>, it returns the next closure in the chain (i.e. the next node in the list).</p>

<h2>Conclusion</h2>

<p>We&rsquo;ve really just scratched the surface here &ndash; it&rsquo;s not hard to see that more complex data structures could be defined using similar techniques. We could even use functions to define <em>numbers</em> by representing the nth integer as a series of n nested functions.</p>

<p>This is all hinting at a deeper fact: any language that allows us to define and apply functions is Turing-complete (meaning we can use it to compute <em>anything that can be computed</em>). This means that inbuilt constructs for arrays, classes, numbers, and even control structures are optional extras!</p>

<p>Check out the <a href="http://palmstroem.blogspot.com.au/2012/05/lambda-calculus-for-absolute-dummies.html">lambda calculus</a> if this is even remotely interesting. Neat, huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implicit Futures in Ruby]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/03/implicit-futures-in-ruby/"/>
    <updated>2014-07-03T02:20:05+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/03/implicit-futures-in-ruby</id>
    <content type="html"><![CDATA[<p>Say we&rsquo;re writing a program that performs several time-consuming operations, like network requests, disk accesses, or complex calculations. We want them to execute concurrently, but we also want our code to remain simple and easy to understand. There are many different ways of approaching this problem, but in this post I&rsquo;ll focus on <em>implicit futures</em> and how they can be implemented in Ruby.</p>

<!-- more -->


<p>This code demonstrates the type of scenario we&rsquo;re dealing with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">foo</span><span class="o">.</span><span class="n">expensive_call_1</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">bar</span><span class="o">.</span><span class="n">expensive_call_2</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">baz</span><span class="o">.</span><span class="n">expensive_call_3</span>
</span><span class='line'>
</span><span class='line'><span class="n">other_stuff</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">xyz</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We perform one or more time-consuming operations, potentially do something else, then use the results of the operations.</p>

<p>In the code above, the time-consuming operations are executed sequentially. This can result in very poor performance (e.g. CPU might be forced to sit idle while a network request completes). Also, the call to <code>other_stuff</code> won&rsquo;t begin running until all three of the previous calls have finished, even though it doesn&rsquo;t depend on their results.</p>

<p>This is the solution we&rsquo;re working towards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">future</span> <span class="p">{</span> <span class="n">foo</span><span class="o">.</span><span class="n">expensive_call_1</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">future</span> <span class="p">{</span> <span class="n">bar</span><span class="o">.</span><span class="n">expensive_call_2</span> <span class="p">}</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">future</span> <span class="p">{</span> <span class="n">baz</span><span class="o">.</span><span class="n">expensive_call_3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">other_stuff</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">xyz</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<em>If you&rsquo;re unfamiliar with Ruby, <code>foo { bar }</code> is equivalent to <code>foo(lambda: bar())</code> in Python</em>)</p>

<p>The expensive calls are now executed asynchronously, and <code>other_stuff</code> can begin running immediately. If line 7 is reached before all three results are available, the main thread will automatically block and wait for them to finish.</p>

<p>Nice! How on Earth do we implement this though&hellip;? At first glance, it looks like we&rsquo;d need to build it into the language itself. As it turns out though, implementing this in Ruby is actually quite easy!</p>

<h2>Threads in Ruby</h2>

<p>We&rsquo;ll use Ruby&rsquo;s <code>Thread</code> class to do most of the heavy-lifting. Here&rsquo;s a quick primer on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="c1"># =&gt; 4</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Thread.new</code> spawns a thread to execute the given code block, and <code>t.value</code> returns the thread&rsquo;s result (waiting for it to finish if necessary).</p>

<p>Let&rsquo;s rewrite our original code to use <code>Thread</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">foo</span><span class="o">.</span><span class="n">expensive_call_1</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">bar</span><span class="o">.</span><span class="n">expensive_call_2</span> <span class="p">}</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">baz</span><span class="o">.</span><span class="n">expensive_call_3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">other_stuff</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">value</span> <span class="o">*</span> <span class="n">c</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This almost gets us where we want to be, but not quite.</p>

<h2>Explicit vs implicit</h2>

<p>In the code above, we have to explicitly retrieve the results by calling <code>value</code> on the futures/threads. This isn&rsquo;t quite what we&rsquo;re after &ndash; they&rsquo;re <em>explicit</em> futures rather than <em>implicit</em> ones.</p>

<p>This might not seem like much of an issue, but consider what would happen if we wanted to pass one of the results to another piece of code. We could either:</p>

<ol>
<li>Call <code>value</code> on the future and directly pass along the result.</li>
<li>Pass along the future, and let the other piece of code call <code>value</code> when it needs the result.</li>
</ol>


<p>Neither of these options is very good. The first can result in suboptimal performance, because we&rsquo;re calling <code>value</code> before we really need to (remember that <code>value</code> might block execution if the result isn&rsquo;t ready yet).</p>

<p>The second is isn&rsquo;t very good either, because it limits the reusability of the other piece of code (which would now only be able to work with futures).</p>

<p>Implicit futures don&rsquo;t have either of these issues. The code that uses them can remain blissfully ignorant of what they are, and no blocking will occur until the result is actually used (i.e. a method is called on it).</p>

<h2>Delegating method calls</h2>

<p>To summarise what we&rsquo;re trying to achieve, we want the future object to appear as though it were the result object. When we call a method on it, it should delegate the call to the result (blocking if necessary until the result becomes available).</p>

<p>It&rsquo;s not immediately obvious how methods could be delegated like this. The future should be able to work with all types of result objects, so we don&rsquo;t know in advance which methods need forwarding.</p>

<p>Ruby has a rather interesting feature called <code>method_missing</code> that comes in handy here. Calling a non-existent method would normally result in an error, but if we define a method called <code>method_missing</code>, Ruby will call that instead.</p>

<p>Here&rsquo;s a quick demo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Useless</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Someone called &#39;</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2">&#39; on me.&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I was given arguments: </span><span class="si">#{</span><span class="n">args</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Now let&#39;s call the block I was given:&quot;</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">well</span> <span class="o">=</span> <span class="no">Useless</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">well</span><span class="o">.</span><span class="n">this_is_weird!</span><span class="p">(</span><span class="s2">&quot;yup&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;I don&#39;t even...&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Someone called 'well_this_is_weird!' on me.
</span><span class='line'>I was given arguments: ["yup"]
</span><span class='line'>Now let's call the block I was given:
</span><span class='line'>I don't even...</span></code></pre></td></tr></table></div></figure>


<p>So, our future class can use <code>method_missing</code> to intercept method calls. It still needs to actually forward the intercepted methods though &ndash; this can be done using <code>send</code>, which lets us dynamically call any method on an object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To summarise, our future can intercept all incoming method calls with <code>method_missing</code> and forward them to the result using <code>send</code>.</p>

<h2>Putting it all together</h2>

<p>We now have everything we need to implement an implicit future. We can:</p>

<ol>
<li>Use <code>Thread</code> to:

<ul>
<li>Asynchronously compute the result.</li>
<li>Block execution if the result is requested before it&rsquo;s ready.</li>
</ul>
</li>
<li>Use <code>method_missing</code> and <code>send</code> to delegate all method calls to the result.</li>
</ol>


<p>The code ends up being surprisingly simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Future</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="vi">@thread</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When a future is created, a thread is immediately spawned to execute the given code block. When a method is called on the future, it simply forwards it to <code>@thread.value</code> (which will block if the thread hasn&rsquo;t finished running yet).</p>

<p>To make it slightly easier to use, we&rsquo;ll define a standalone <code>future</code> function that creates and returns a <code>Future</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">future</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Future</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now create futures like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">future</span> <span class="p">{</span> <span class="n">expensive_call</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks exactly like what we set out to achieve! Might be a good idea to check if it works though&hellip;</p>

<h2>Testing time</h2>

<p>Let&rsquo;s start with a sanity-check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="n">future</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Future: Started.&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Future: Finished.&quot;</span>
</span><span class='line'>  <span class="s2">&quot;yeeeeaaaaaaaahh&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Attempting to use the result.&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">f</span><span class="o">.</span><span class="n">upcase</span>
</span></code></pre></td></tr></table></div></figure>


<p>To mimic an expensive operation, I&rsquo;ve placed a call to <code>sleep</code> in the code given to the future. The call to <code>f.upcase</code> should cause the main thread to block for several seconds until the result is ready. Here&rsquo;s the output we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Future: Started.
</span><span class='line'>Attempting to use the result.
</span><span class='line'>Future: Finished.
</span><span class='line'>YEEEEAAAAAAAAHH</span></code></pre></td></tr></table></div></figure>


<p>It worked!</p>

<p>Now let&rsquo;s try more realistic example. We&rsquo;ll download a bunch of webpages and record how long it takes, with and without futures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="s2">&quot;https://www.google.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://www.microsoft.com&quot;</span><span class="p">,</span> <span class="s2">&quot;http://www.abc.net.au&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;http://www.reddit.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://www.atlassian.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://duckduckgo.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://www.facebook.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://www.ruby-lang.org&quot;</span><span class="p">,</span> <span class="s2">&quot;http://whirlpool.net.au&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://bitbucket.org&quot;</span><span class="p">,</span> <span class="s2">&quot;https://github.com&quot;</span><span class="p">,</span> <span class="s2">&quot;https://news.ycombinator.com&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">download_with_futures</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pages</span> <span class="o">=</span> <span class="n">urls</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>    <span class="n">future</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># For the purposes of the benchmark, wait until all downloads have</span>
</span><span class='line'>  <span class="c1"># finished by calling a method on each future.</span>
</span><span class='line'>  <span class="n">pages</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">page</span><span class="o">|</span> <span class="n">page</span><span class="o">.</span><span class="n">length</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">download_without_futures</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span>
</span><span class='line'>  <span class="n">urls</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">report</span> <span class="p">{</span> <span class="n">download_with_futures</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">report</span> <span class="p">{</span> <span class="n">download_without_futures</span><span class="p">(</span><span class="n">urls</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the results are&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   user     system      total        real
</span><span class='line'>   0.160000   0.040000   0.200000 (  2.561927)
</span><span class='line'>   0.110000   0.030000   0.140000 ( 13.774315)</span></code></pre></td></tr></table></div></figure>


<p>13.8 seconds down to 2.6 seconds. Not bad!</p>

<h2>Caveats</h2>

<p>The <code>Future</code> class given above isn&rsquo;t exactly production-ready. If you were using it in a real project, you&rsquo;d want it to:</p>

<ul>
<li>Capture exceptions that occur during the thread&rsquo;s execution and re-throw them when the result is accessed.</li>
<li>Inherit from <code>BasicObject</code> instead of <code>Object</code>, so methods defined on <code>Object</code> are also delegated to the result.</li>
<li>Use a thread pool to prevent the system from being overloaded by a large number of threads.</li>
<li>Probably a bunch of other things I haven&rsquo;t thought of.</li>
</ul>


<p>A basic implementation in 9 lines of code isn&rsquo;t too shabby though :P</p>

<h2>Conclusion</h2>

<p>Futures are awesome. Ruby is awesome. That is all.</p>
]]></content>
  </entry>
  
</feed>
