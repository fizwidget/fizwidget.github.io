<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional Programming | fizwidget]]></title>
  <link href="http://fizwidget.github.io/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-28T18:36:21+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Pipelines]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/27/functional-pipelines/"/>
    <updated>2014-07-27T12:45:10+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/27/functional-pipelines</id>
    <content type="html"><![CDATA[<p>The concept of pipelining is pretty simple &ndash; components are connected in series such that the output from one flows into the input of the next. Piping data in shell scripts is an example most programmers are familiar with:</p>

<p><code>bash
cat logs | grep 'ERROR' | sed 's/color/colour/g' | sort | uniq
</code></p>

<p>This style of programming doesn&rsquo;t have to be relegated to shell scripts though &ndash; it&rsquo;s a universal concept that can help us write better code in many different languages. Instead of piping data from one program to another, we&rsquo;ll compose functions (or equivalently, chain methods).</p>

<!-- more -->


<p>Let&rsquo;s jump straight into some Ruby examples, then I&rsquo;ll discuss how these ideas apply to other languages.</p>

<h2>Example 1</h2>

<p>Say we&rsquo;ve got a list of student objects, and we want to get the email addresses of the ten youngest third-year compsci students (perhaps to send them a survey or something). Using a traditional imperative approach, we might write something along these lines:</p>

<p>``` ruby</p>

<h1>Select all the third-year CS students.</h1>

<p>third_year_cs_students = []
for student in students
  if student.level == 3 &amp;&amp; student.degree == :comp_sci</p>

<pre><code>third_year_cs_students.push(student)
</code></pre>

<p>  end
end</p>

<h1>Take the 10 youngest of these students.</h1>

<p>third_year_cs_students.sort_by!(&amp;:age)
youngest_third_year_cs_students = third_year_cs_students.slice(0, 10)</p>

<h1>Collect their email addresses.</h1>

<p>emails = []
for student in youngest_third_year_cs_students
  email = student.email_address
  emails.push(email)
end</p>

<p>return emails
```</p>

<p>This works, but it&rsquo;s quite verbose, and it&rsquo;s not particularly easy to understand or modify.</p>

<p>Let&rsquo;s instead try structuring our solution as a pipeline. We can translate the problem description almost directly into code by chaining together methods from Ruby&rsquo;s <a href="http://www.ruby-doc.org/core-2.1.1/Enumerable.html"><code>Enumerable</code></a> module:</p>

<p>``` ruby
students.select { |s| s.level == 3 }</p>

<pre><code>    .select { |s| s.degree == :comp_sci }
    .sort_by(&amp;:age)
    .take(10)
    .collect(&amp;:email_address)
</code></pre>

<p>```</p>

<p>This is clearly a big improvement. It&rsquo;s concise, easy to understand, and easy to modify. It also has the potential to run more efficiently, as the <code>select</code> and <code>collect</code> operations could potentially be distributed over multiple cores.</p>

<p>A key thing to note is that none of these methods are modifying the objects they&rsquo;re called on. They&rsquo;re instead applying some kind of filter or transformation, then outputting a new sequence to the next stage of the pipeline.</p>

<p>It&rsquo;s also worth pointing out that we can use intermediate variables and/or helper methods if we wish &ndash; the code doesn&rsquo;t <em>have</em> to be an unbroken chain of method calls. So long as we cleanly separate the stages and avoid mutating state (reassigning variables, appending to lists, etc), we&rsquo;re still using a pipelined approach.</p>

<h2>Example 2</h2>

<p>In this example, we want to get the extensions of the smallest file and the largest file in a directory. If the smallest file was a text document and the largest a video, <code>[".txt", ".mkv"]</code> might be the output.</p>

<p>Here&rsquo;s our first implementation attempt:</p>

<p>``` ruby
min_extension = nil
max_extension = nil
min_size = 0
max_size = 0</p>

<p>Dir.foreach(dir_path) do |path|
  if File.file?(path)</p>

<pre><code>size = File.size(path)
if size &lt; min_size || min_extension.nil?
  min_extension = File.extname(path)
  min_size = size
end
if size &gt; max_size || max_extension.nil?
  max_extension = File.extname(path)
  max_size = size
end
</code></pre>

<p>  end
end</p>

<p>return [min_extension, max_extension]
```</p>

<p>Conceptually, there are four stages to the computation: list all directory entries, select the entries that correspond to files, select the smallest and largest of these files, and lastly, get their extensions. In the code above, these stages are all intermingled. This makes it hard to understand and limits the reusability of the logic.</p>

<p>Taking a pipelined approach with <code>Enumerable</code> methods, we can cleanly separate the stages and reuse existing logic:</p>

<p><code>ruby
Dir.entries(dir_path)
   .select    { |path| File.file?(path) }
   .minmax_by { |path| File.size(path) }
   .collect   { |path| File.extname(path) }
</code></p>

<p>Much nicer!</p>

<h2>In other languages</h2>

<p>The examples above are written in Ruby, but the concepts are universal. In Python, list comprehensions, generator expressions, the <code>itertools</code> module, and built-in functions like <code>map</code> and <code>filter</code> all come in handy. In Java 8, the Streams API provides the equivalent toolset. In C#, check out <code>Enumerable</code> and LINQ. Odds are, your language of choice supports these concepts in one form or another. In some cases, cool things like parallel execution or lazy evaluation of pipelines are also supported.</p>

<p>This style of coding has its roots in functional programming, and it&rsquo;s the standard way of doing things in languages like Haskell and Scheme. There are also obvious similarities to SQL. This is no coincidence, as functional languages and SQL are both <a href="http://en.wikipedia.org/wiki/Declarative_programming">declarative</a> rather than <a href="http://en.wikipedia.org/wiki/Imperative_programming">imperative</a> in nature (meaning we describe <em>what</em> we want rather than spell out exactly <em>how</em> to achieve it).</p>

<h2>Conclusion</h2>

<p>The next time you find yourself writing loops and if-statements, consider whether a functional pipelined approach would be more appropriate. Once you&rsquo;re familiar with this style of programming, you&rsquo;ll see lots of opportunities to make your code simpler and more robust.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nothing but Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/03/nothing-but-functions/"/>
    <updated>2014-07-03T16:59:34+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/03/nothing-but-functions</id>
    <content type="html"><![CDATA[<p>Imagine we&rsquo;re using a programming language that doesn&rsquo;t give us any way of defining data structures. No arrays, no tuples, no structs, no classes. Nothing. All we can do is define and call functions.</p>

<p>Now imagine we need to work with a collection of items. Are we screwed?</p>

<!-- more -->


<h2>Building data structures out of functions</h2>

<p>It turns out we can create data structures, quite literally, out of functions. Here&rsquo;s a linked list in Python:</p>

<p>``` python
def make_list(head, tail=None):
  def node(operation):</p>

<pre><code>if operation == "head":
  return head
elif operation == "tail":
  return tail
</code></pre>

<p>  return node
```</p>

<p>The <code>make_list</code> function accepts a <code>head</code> (the data item we want to store), and a <code>tail</code> (the next node in the list). It returns an instance of the <code>node</code> function, which in turn accepts a single argument and returns the head or tail of the list.</p>

<p>We can use <code>make_list</code> to construct the list <code>[1, 2, 3]</code> as follows:</p>

<p><code>python
numbers = make_list(1, make_list(2, make_list(3)))
</code></p>

<p>Let&rsquo;s try extracting the values from it:</p>

<p><code>python
numbers("head")                 # =&gt; 1
numbers("tail")("head")         # =&gt; 2
numbers("tail")("tail")("head") # =&gt; 3
</code></p>

<p>Now let&rsquo;s take a look at the nodes themselves:</p>

<p><code>python
numbers                         # =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d620&gt;
numbers("tail")                 # =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d510&gt;
numbers("tail")("tail")         # =&gt; &lt;function make_list.&lt;locals&gt;.node at 0x10341d488&gt;
numbers("tail")("tail")("tail") # =&gt; None
</code></p>

<p>We do indeed have a list made of functions (an immutable, singly-linked list to be precise).</p>

<p>It&rsquo;s a bit tedious to work with at the moment, but there&rsquo;s nothing stopping us from writing utility functions to work with it. Here&rsquo;s a function that prints it for example:</p>

<p>``` python
def print_list(lst):
  if lst:</p>

<pre><code>print(lst("head"))
print_list(lst("tail"))
</code></pre>

<p>```</p>

<h2>Closures</h2>

<p>The <code>make_list</code> code only works because Python supports closures. A closure is, roughly speaking, a function that has access to the variables from the scope it was defined in. The <code>node</code> function is a good example of this: <code>head</code> and <code>tail</code> aren&rsquo;t explicitly passed in as arguments, but it&rsquo;s able to use them all the same. Each time we call <code>make_list</code>, a new instance of <code>node</code> is created that references the new versions of <code>head</code> and <code>tail</code>.</p>

<p>Our list is nothing more than a chain of nested closures. When we call the outermost closure and pass it <code>"tail"</code>, it returns the next closure in the chain (i.e. the next node in the list).</p>

<h2>Conclusion</h2>

<p>We&rsquo;ve really just scratched the surface here &ndash; it&rsquo;s not hard to see that more complex data structures could be defined using similar techniques. We could even use functions to define <em>numbers</em> by representing the nth integer as a series of n nested functions.</p>

<p>This is all hinting at a deeper fact: any language that allows us to define and apply functions is Turing-complete (meaning we can use it to compute <em>anything that can be computed</em>). This means that inbuilt constructs for arrays, classes, numbers, and even control structures are optional extras for a programming language!</p>

<p>Check out the <a href="http://palmstroem.blogspot.com.au/2012/05/lambda-calculus-for-absolute-dummies.html">lambda calculus</a> if this is even remotely interesting. Neat, huh?</p>
]]></content>
  </entry>
  
</feed>
