<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional Programming | OnCode]]></title>
  <link href="http://fizwidget.github.io/blog/categories/functional-programming/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-03T22:13:54+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/03/a-list-made-of-functions/"/>
    <updated>2014-07-03T16:59:34+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/03/a-list-made-of-functions</id>
    <content type="html"><![CDATA[<p>A list made of functions. Not a list containing functions, and not a function that creates lists. A list that <em>is</em> functions. That probably doesn&rsquo;t make any sense, so let&rsquo;s jump straight into the code&hellip;</p>

<p>``` python
def make_node(value, next_node=None):
  def node(request):</p>

<pre><code>if request == "value":
  return value
elif request == "next_node":
  return next_node
</code></pre>

<p>  return node
```</p>

<p>Let&rsquo;s try it out&hellip;</p>

<p>``` python
numbers = make_node(1, make_node(2, make_node(3)))</p>

<p>numbers(&ldquo;value&rdquo;) # => 1
numbers(&ldquo;next_node&rdquo;)(&ldquo;value&rdquo;) # => 2
numbers(&ldquo;next_node&rdquo;)(&ldquo;next_node&rdquo;)(&ldquo;value&rdquo;) # => 3
```</p>

<p>``` python
def print_list(node):
  if node:</p>

<pre><code>print(node("value"))
print_list(node("next_node"))
</code></pre>

<p>```</p>

<p>So, we can build data structures out of functions. Kinda pointless, but I think it does a pretty good job of explaining what closures are. It also hints at the fact that functions are really powerful. It turns out you can do pretty much <em>anything</em> with functions &ndash; the lambda calculus is a Turing complete language which consists of nothing but the application of anonymous functions. A programming language doesn&rsquo;t technically <em>need</em> to have the concept of numbers build into it &ndash; you can model numbers using functions (Church numerals).</p>
]]></content>
  </entry>
  
</feed>
