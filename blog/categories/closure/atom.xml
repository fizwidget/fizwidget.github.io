<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Closure | OnCode]]></title>
  <link href="http://fizwidget.github.io/blog/categories/closure/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-04T21:11:31+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functions Are Weird]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/03/a-list-made-of-functions/"/>
    <updated>2014-07-03T16:59:34+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/03/a-list-made-of-functions</id>
    <content type="html"><![CDATA[<p>Imagine we&rsquo;re using a programming language that doesn&rsquo;t give us any way of defining data structures. No arrays, no structs, no objects, no classes. Nothing. All we can do is define and call functions.</p>

<p>We need to work with a collection of items. Are we screwed?</p>

<h2>A list made of functions</h2>

<p>Turns out the answer is no. We can create linked lists, quite literally, out of functions. Let&rsquo;s jump straight into some code:</p>

<p>``` python
def make_list(head, tail):
  def node(operation):</p>

<pre><code>if operation == "head":
  return head
elif operation == "tail":
  return tail
</code></pre>

<p>  return node
```</p>

<p>The <code>make_list</code> function accepts a <code>head</code> (the data item we want to store), and a <code>tail</code> (the rest of the linked list). We can use it to construct the list <code>[1, 2, 3]</code> as follows:</p>

<p><code>python
items = make_list(1, make_list(2, make_list(3, None)))
</code></p>

<p>When we call <code>make_list</code>, it defines and returns function called <code>node</code>. The <code>node</code> function accepts a single parameter and returns the head or the tail based on its value.</p>

<p>Let&rsquo;s test it out:</p>

<p><code>python
items("head")                 # =&gt; 1
items("tail")                 # =&gt; &lt;function node at 0x107a82b18&gt;
items("tail")("head")         # =&gt; 2
items("tail")("tail")("head") # =&gt; 3
items("tail")("tail")("tail") # =&gt; None
</code></p>

<p>Neat! That&rsquo;s a bit tedious though, so let&rsquo;s write a function to print the list:</p>

<p>``` python
def print_list(items):
  if items:</p>

<pre><code>print(items("head"))
print_list(items("tail"))
</code></pre>

<p>print_list(items) # Output: 1 2 3
```</p>

<h2>Closures</h2>

<p>A closure is a function that can access the variables from the scope in which it was created. We can see an example of this in the code above: the <code>node</code> function accesses <code>head</code> and <code>tail</code>, which were passed into <code>make_list</code>. Each time we call <code>make_list</code>, a new instance of <code>node</code> is returned that references the new <code>head</code> and <code>tail</code> arguments.</p>

<p>Our list is nothing more than a chain of nested closures. When we call the outermost closure and pass it <code>"tail"</code> as an argument, it returns the next closure in the chain (i.e. the next node in the list).</p>

<h2>Conclusion</h2>

<p>We&rsquo;ve really just scratched the surface here &ndash; it&rsquo;s not hard to see that similar techniques could be used to define more complex data structures. We could even use functions to define <em>numbers</em> by representing the nth integer as a series of n nested functions.</p>

<p>This is all hinting at a deeper fact: any language that allows you to define and apply functions is Turing-complete (meaning it lets you compute anything that can be computed). The <a href="http://palmstroem.blogspot.com.au/2012/05/lambda-calculus-for-absolute-dummies.html">lambda calculus</a> is the canonical example of such a language.</p>

<p>Neat, huh?</p>
]]></content>
  </entry>
  
</feed>
