<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | fizwidget]]></title>
  <link href="http://fizwidget.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-27T21:32:14+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python or Ruby?]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/25/python-or-ruby/"/>
    <updated>2014-07-25T22:10:23+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/25/python-or-ruby</id>
    <content type="html"><![CDATA[<p>Python and Ruby are the two heavyweights in the general-purpose, high-level, dynamic language category. They&rsquo;re both awesome, but given the choice, I&rsquo;ll generally go with Ruby. This is my attempt at explaining why&hellip;</p>

<!-- more -->


<h2>Ruby is consistently object-oriented</h2>

<p>Pretty much everything we do in Ruby involves calling methods on objects:</p>

<p><code>ruby
-42.abs               # =&gt; 42
[1, 2, 3].length      # =&gt; 3
[1, 2, 3].reverse     # =&gt; [3, 2, 1]
[1, 2, 3].reverse!    # Reverses list in-place.
[1, 2, 3].min         # =&gt; 1
"foo".capitalize      # =&gt; "Foo"
File.new("bar")       # =&gt; File object
file.close            # Closes file object.
</code></p>

<p>In Python though, a mixture of functions and methods are typically used:</p>

<p><code>python
abs(-42)              # =&gt; 42
len([1, 2, 3])        # =&gt; 3
reversed([1, 2, 3])   # =&gt; [3, 2, 1]
[1, 2, 3].reverse()   # Reverses list in-place.
min([1, 2, 3])        # =&gt; 1
"foo".capitalize()    # =&gt; "Foo"
open("bar")           # =&gt; File object
file.close()          # Closes file object.
</code></p>

<p>One of the benefits of Ruby&rsquo;s consistency is that we can always read code left-to-right. This makes functional-style pipelines much easier to read and write:</p>

<p><code>ruby
"world hello".split.reverse.join(" ") # =&gt; "hello world"
</code></p>

<p>The equivalent Python code is much harder to make sense of. We have to read some parts left-to-right and other parts inside-out. Yuk!</p>

<p><code>python
" ".join(reversed("world hello".split())) # =&gt; "hello world"
</code></p>

<h2>Blocks are awesome</h2>

<p>One of Ruby&rsquo;s best features is the elegant syntax it has for passing anonymous functions (&ldquo;blocks&rdquo;) as arguments to methods. Blocks are like Python&rsquo;s lambda expressions, only more powerful, more widely used, and visually cleaner.</p>

<p>Blocks allow us to perform many different tasks using a single uniform syntax. For example:</p>

<p><code>ruby
[1, 2, 3].each   { |x| puts x }         # Iteration using blocks.
File.open('a')   { |f| puts f.read }    # Automatic resource management using blocks.
[1, 2, 3].select { |x| x &gt; 2 }          # List processing using blocks.
data.sort_by     { |x| foo.bar(x) }     # Sorting using blocks.
urls.lazy.map    { |u| download(u) }    # Lazy evaluation using blocks.
</code></p>

<p>In Python, we&rsquo;d typically use no fewer than <em>five</em> language constructs to perform the same tasks:</p>

<p><code>python
for x in [1, 2, 3]: print(x)            # Iteration using 'for'.
with f as open('a'): print(f.read())    # Automatic resource management using 'with'.
[x for x in [1, 2, 3] if x &gt; 2]         # List processing using list comprehensions.
sorted(data, key=lambda x: foo.bar(x))  # Sorting using 'lambda'.
(download(u) for u in urls)             # Lazy evaluation using generator expressions.
</code></p>

<p>One flexible construct > multiple rigid ones in my book.</p>

<h2>Clear conditionals</h2>

<p>In Python, empty collections, empty strings, and certain other objects are logically false. This isn&rsquo;t just a quirk of the language, it&rsquo;s promoted in <a href="http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations">PEP 8</a> as the Pythonic way of checking for empty sequences. In addition to this, the number zero is logically false, and non-zero numbers are logically true.</p>

<p>``` python
if not some_sequence:</p>

<pre><code># Whatever happened to "explicit is better than implicit"??
</code></pre>

<p>if some_number:</p>

<pre><code># Admittedly this one isn't very Pythonic, but it does work.
</code></pre>

<p>```</p>

<p>Ruby doesn&rsquo;t allow these shenanigans, so the equivalent code is much more explicit:</p>

<p>``` ruby
if some_sequence.empty?
  # Obvious meaning is obvious.
end</p>

<p>unless some_number.zero?
  # Could use &lsquo;if some_number != 0&rsquo;, but this is nicer ;)
end
```</p>

<p>It&rsquo;s also worth noting that we can use <code>unless</code> and <code>until</code> in Ruby instead of <code>if not</code> and <code>while not</code> in Python. Method names can also include the &lsquo;?&rsquo; character, further improving readability. Compare this Python snippet:</p>

<p>``` python
while not buffer.is_full():</p>

<pre><code># Add data to buffer.
</code></pre>

<p>```</p>

<p>With this Ruby one:</p>

<p><code>ruby
until buffer.full?
  # Add data to buffer.
end
</code></p>

<h2>Private parts</h2>

<p>Instance variables are private by default in Ruby, which encourages proper encapsulation of implementation details.</p>

<p>``` ruby
class Foo
  def initialize</p>

<pre><code>@secret = 42
</code></pre>

<p>  end
end</p>

<p>Foo.new.secret # => Error!
```</p>

<p>Everything defaults to public in Python, and privacy can only be suggested a naming convention. This means we&rsquo;re more likely to end up with inappropriate dependencies on implementation details.</p>

<p>``` python
class Foo:</p>

<pre><code>def __init__(self):
    self.not_so_secret = 42
</code></pre>

<p>Foo().not_so_secret # => 42
```</p>

<p>Ruby&rsquo;s approach seems the wiser one to me. Encapsulation is a Good Ideaâ„¢, so why shouldn&rsquo;t the language support and encourage it?</p>

<p><em>(By the way, Ruby&rsquo;s approach doesn&rsquo;t result in C++/Java-style boilerplate. We can generate default getters/setters by placing <code>attr_accessor :property_name</code> in the class body, and override them later if need be.)</em></p>

<h2>Ruby&rsquo;s pretty!</h2>

<p>OK, I&rsquo;ll admit this one is ever so slightly subjective. Having said that, compare this:</p>

<p>``` ruby
class Person
  def initialize(age)</p>

<pre><code>@age = age
</code></pre>

<p>  end</p>

<p>  def to_s</p>

<pre><code>"Person is #{@age} years old."
</code></pre>

<p>  end
end</p>

<p>person = Person.new(34)
puts person
```</p>

<p>To this:</p>

<p>``` python
class Person(object):</p>

<pre><code>def __init__(self, age):
    self.age = age

def __str__(self):
    return "Person is {} years old.".format(self.age)
</code></pre>

<p>person = Person(34)
print(person)
```</p>

<p>The Ruby code has fewer parentheses, colons, and underscores, and doesn&rsquo;t need to specify <code>object</code>, <code>self</code>, or <code>return</code>. Python&rsquo;s whitespace sensitivity does allow it to omit <code>end</code>, but this doesn&rsquo;t make up for all the other clutter in my opinion.</p>

<h2>Naming and documentation</h2>

<p>The naming conventions used in Python&rsquo;s standard library are a bit of a mess (even <a href="http://legacy.python.org/dev/peps/pep-0008/#naming-conventions">PEP 8</a> admits as much). Ruby&rsquo;s standard library is much more consistent in comparison.</p>

<p>In terms of documentation quality, Ruby also has the edge. Descriptions are clearer and more detailed, and usage examples are almost always given. Consider the documentation for <code>str.capitalize</code> in Python:</p>

<p>``` plain
str.capitalize = capitalize(&hellip;)</p>

<pre><code>S.capitalize() -&gt; string

Return a copy of the string S with only its first character
capitalized.
</code></pre>

<p>```</p>

<p>Then compare it with Ruby&rsquo;s <code>String#capitalize</code>:</p>

<p>``` plain
= String#capitalize</p>

<h2>(from ruby core)</h2>

<p>  str.capitalize   &ndash;> new_str</p>

<hr />

<p>Returns a copy of str with the first character converted to uppercase
and the remainder to lowercase. Note: case conversion is effective only in
ASCII region.</p>

<p>  &ldquo;hello&rdquo;.capitalize    #=> &ldquo;Hello&rdquo;
  &ldquo;HELLO&rdquo;.capitalize    #=> &ldquo;Hello&rdquo;
  &ldquo;123ABC&rdquo;.capitalize   #=> &ldquo;123abc&rdquo;
```</p>

<p>Unless you were paying close attention, you might have missed the fact that <code>str.capitalize</code> converts the remainder of the string to lowercase (e.g. &ldquo;ABC&rdquo; goes to &ldquo;Abc&rdquo;). The Ruby documentation makes this behaviour much more obvious, and gives clarifying examples.</p>

<p>This is just one example of course, but these kinds of differences are not atypical in my experience.</p>

<h2>Conclusion</h2>

<p>So those are a few of the reasons why I prefer Ruby to Python. Admittedly this was a rather one sided comparison &ndash; Ruby has plenty of downsides and Python plenty of upsides that I neglected to mention. Perhaps those will be the topic of a future post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implicit Futures in Ruby]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/06/implicit-futures-in-ruby/"/>
    <updated>2014-07-06T02:20:05+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/06/implicit-futures-in-ruby</id>
    <content type="html"><![CDATA[<p>Say we&rsquo;re writing a program that performs several time-consuming operations, like network requests, disk accesses, or complex calculations. We want them to execute concurrently, but we also want our code to remain simple and easy to understand. There are many different ways of approaching this problem, but in this post I&rsquo;ll focus on <em>implicit futures</em> and how they can be implemented in Ruby.</p>

<!-- more -->


<p>This code demonstrates the type of scenario we&rsquo;re dealing with:</p>

<p>``` ruby
a = foo.expensive_call_1
b = bar.expensive_call_2
c = baz.expensive_call_3</p>

<p>other_stuff</p>

<p>result = a.some_method(b + c)
```</p>

<p>We perform one or more time-consuming operations, potentially do something else, then use the results of the operations.</p>

<p>In the code above, the time-consuming operations are executed sequentially. This can result in very poor performance (e.g. CPU might be forced to sit idle while a network request completes). Also, the call to <code>other_stuff</code> won&rsquo;t begin running until all three of the previous calls have finished, even though it doesn&rsquo;t depend on their results.</p>

<p>This is the solution we&rsquo;re working towards:</p>

<p>``` ruby
a = future { foo.expensive_call_1 }
b = future { bar.expensive_call_2 }
c = future { baz.expensive_call_3 }</p>

<p>other_stuff</p>

<p>result = a.some_method(b + c)
```</p>

<p>(<em>If you&rsquo;re unfamiliar with Ruby, <code>foo { bar }</code> is equivalent to <code>foo(lambda: bar())</code> in Python</em>)</p>

<p>The expensive calls are now executed asynchronously, and <code>other_stuff</code> can begin running immediately. If line 7 is reached before all three results are available, the main thread will automatically block and wait for them to finish.</p>

<p>Nice! How on Earth can this be implemented though&hellip;? At first glance, it looks like we&rsquo;d need to modify the language itself. As we&rsquo;ll see, there&rsquo;s actually a much simpler approach.</p>

<h2>Threads in Ruby</h2>

<p>We&rsquo;ll use Ruby&rsquo;s <code>Thread</code> class to do most of the heavy-lifting. Here&rsquo;s a quick primer on it:</p>

<p><code>ruby
t = Thread.new { 2 + 2 }
t.value # =&gt; 4
</code></p>

<p><code>Thread.new</code> spawns a thread to execute the given code block, and <code>t.value</code> returns the thread&rsquo;s result (waiting for it to finish if necessary).</p>

<p>Let&rsquo;s rewrite our original code to use <code>Thread</code>:</p>

<p>``` ruby
a = Thread.new { foo.expensive_call_1 }
b = Thread.new { bar.expensive_call_2 }
c = Thread.new { baz.expensive_call_3 }</p>

<p>other_stuff</p>

<p>result = a.value.some_method(b.value + c.value)
```</p>

<p>This almost gets us where we want to be, but not quite.</p>

<h2>Explicit vs implicit</h2>

<p>In the code above, we have to explicitly retrieve the results by calling <code>value</code> on the futures/threads. This means they&rsquo;re <em>explicit</em> futures rather than <em>implicit</em> ones.</p>

<p>This might not seem like much of an issue, but what if we wanted to pass one of the results on to another piece of code? We could either:</p>

<ol>
<li>Call <code>value</code> on the future, and pass along the result directly.</li>
<li>Pass along the future, and let the other piece of code call <code>value</code> when it needs the result.</li>
</ol>


<p>Neither of these options are very good. The first can result in suboptimal performance, because we&rsquo;re calling <code>value</code> before we really need to (remember that <code>value</code> might block execution if the result isn&rsquo;t ready yet). The second option limits the reusability of the other piece of code, as it will now only be able to work with futures.</p>

<p>Implicit futures don&rsquo;t have either of these issues. The code that uses them can remain blissfully ignorant of the fact that they&rsquo;re futures, and no blocking will occur until the result is actually needed (i.e. a method is called on it).</p>

<h2>Delegating method calls</h2>

<p>To summarise what we&rsquo;re trying to achieve, we want the future object to behave as though it were the result object. When we call a method on it, it should delegate the call to the result (blocking if necessary until the result becomes available).</p>

<p>It&rsquo;s not immediately obvious how methods can be delegated like this. The future should be able to work with all types of result objects, so we don&rsquo;t know in advance which methods need forwarding.</p>

<p>Ruby has a rather interesting feature called <code>method_missing</code> that comes in handy here. Calling a non-existent method would normally result in an error, but if we define a method called <code>method_missing</code>, Ruby will call that instead.</p>

<p>Here&rsquo;s a quick demo:</p>

<p>``` ruby
class Useless
  def method_missing(method_name, *args, &amp;block)</p>

<pre><code>puts "Someone called '#{method_name}' on me."
puts "I was given arguments: #{args}"
puts "Now let's call the block I was given:"
block.call
</code></pre>

<p>  end
end</p>

<p>u = Useless.new
u.this_is_weird!(&ldquo;yup&rdquo;) { puts &ldquo;I don&rsquo;t even&hellip;&rdquo; }
```</p>

<p>This gives the following output:</p>

<p><code>plain
Someone called 'this_is_weird!' on me.
I was given arguments: ["yup"]
Now let's call the block I was given:
I don't even...
</code></p>

<p>Our future class can use <code>method_missing</code> to intercept method calls. However, it still needs to actually forward the intercepted methods to the result. This can be done using <code>send</code>, which lets us dynamically call any method on an object:</p>

<p><code>ruby
some_object.send(method_name, args, &amp;block)
</code></p>

<h2>Putting it all together</h2>

<p>We now have everything we need to implement implicit futures. We can define a <code>Future</code> class that:</p>

<ol>
<li>Uses <code>Thread</code> to:

<ul>
<li>Asynchronously compute the result.</li>
<li>Block execution if the result is requested before it&rsquo;s ready.</li>
</ul>
</li>
<li>Uses <code>method_missing</code> and <code>send</code> to delegate all method calls to the result.</li>
</ol>


<p>The code ends up being very simple:</p>

<p>``` ruby
class Future
  def initialize(&amp;block)</p>

<pre><code>@thread = Thread.new { block.call }
</code></pre>

<p>  end</p>

<p>  def method_missing(method_name, *args, &amp;block)</p>

<pre><code>result = @thread.value
result.send(method_name, *args, &amp;block)
</code></pre>

<p>  end
end
```</p>

<p>When a future is created, a thread is immediately spawned to execute the given code block. When a method is called on the future, it simply forwards it to <code>@thread.value</code> (which will block execution if the thread hasn&rsquo;t finished running yet).</p>

<p>To make it slightly easier to use, we&rsquo;ll define a standalone <code>future</code> function that creates and returns a <code>Future</code> object:</p>

<p><code>ruby
def future(&amp;block)
  Future.new(&amp;block)
end
</code></p>

<p>We can now create futures like this:</p>

<p><code>ruby
f = future { expensive_call }
</code></p>

<p>This looks exactly like what we set out to achieve! Might be a good idea to check if it works though&hellip;</p>

<h2>Testing!</h2>

<p>Let&rsquo;s start with a quick sanity-check. To mimic an expensive operation, I&rsquo;ve placed a call to <code>sleep</code> in the code given to the future:</p>

<p>``` ruby
f = future do
  puts &ldquo;Future: Started.&rdquo;
  sleep(4)
  puts &ldquo;Future: Finished.&rdquo;
  &ldquo;I&rsquo;m the result!&rdquo;
end</p>

<p>sleep(2)</p>

<p>puts &ldquo;Attempting to use the result.&rdquo;
puts f.upcase
```</p>

<p>The call to <code>f.upcase</code> should cause the main thread to block for several seconds until the result is ready. If we run the code, this is exactly what we see happen. Here&rsquo;s the output:</p>

<p><code>plain
Future: Started.
Attempting to use the result.
Future: Finished.
I'M THE RESULT!
</code></p>

<p>It worked!</p>

<p>Now let&rsquo;s try more realistic example. We&rsquo;ll download a bunch of webpages and record how long it takes, with and without futures:</p>

<p>``` ruby
require &lsquo;benchmark&rsquo;
require &lsquo;open-uri&rsquo;</p>

<p>urls = [
  &ldquo;<a href="https://www.google.com">https://www.google.com</a>&rdquo;, &ldquo;<a href="https://www.microsoft.com">https://www.microsoft.com</a>&rdquo;, &ldquo;<a href="http://www.abc.net.au">http://www.abc.net.au</a>&rdquo;,
  &ldquo;<a href="http://www.reddit.com">http://www.reddit.com</a>&rdquo;, &ldquo;<a href="https://www.atlassian.com">https://www.atlassian.com</a>&rdquo;, &ldquo;<a href="https://duckduckgo.com">https://duckduckgo.com</a>&rdquo;,
  &ldquo;<a href="https://www.facebook.com">https://www.facebook.com</a>&rdquo;, &ldquo;<a href="https://www.ruby-lang.org">https://www.ruby-lang.org</a>&rdquo;, &ldquo;<a href="http://whirlpool.net.au">http://whirlpool.net.au</a>&rdquo;,
  &ldquo;<a href="https://bitbucket.org">https://bitbucket.org</a>&rdquo;, &ldquo;<a href="https://github.com">https://github.com</a>&rdquo;, &ldquo;<a href="https://news.ycombinator.com">https://news.ycombinator.com</a>&rdquo;
]</p>

<p>def download_with_futures(urls)
  pages = urls.map do |url|</p>

<pre><code>future { open(url) { |f| f.read } }
</code></pre>

<p>  end
  # For the purposes of the benchmark, wait until all downloads have
  # finished by calling a method on each future.
  pages.each { |page| page.length }
end</p>

<p>def download_without_futures(urls)
  urls.map do |url|</p>

<pre><code>open(url) { |f| f.read }
</code></pre>

<p>  end
end</p>

<p>Benchmark.bm do |b|
  b.report { download_with_futures(urls) }
  b.report { download_without_futures(urls) }
end
```</p>

<p>And the results are&hellip;</p>

<p>``` plain</p>

<pre><code>   user     system      total        real
</code></pre>

<p>   0.160000   0.040000   0.200000 (  2.561927)
   0.110000   0.030000   0.140000 ( 13.774315)
```</p>

<p>13.8 seconds down to 2.6 seconds. Not bad!</p>

<h2>Caveats</h2>

<p>The <code>Future</code> class given above isn&rsquo;t exactly production-ready. If you were using it in a real project, you&rsquo;d want it to:</p>

<ul>
<li>Capture exceptions that occur during the thread&rsquo;s execution and re-throw them when the result is accessed.</li>
<li>Inherit from <code>BasicObject</code> instead of <code>Object</code>, so methods defined on <code>Object</code> are also delegated to the result.</li>
<li>Use a thread pool to prevent the system from being overloaded by a large number of threads.</li>
<li>Probably a bunch of other things I haven&rsquo;t thought of.</li>
</ul>


<p>A basic implementation in 9 lines of code isn&rsquo;t too shabby though!</p>

<h2>Conclusion</h2>

<p>Futures are awesome. Ruby is awesome. That is all.</p>
]]></content>
  </entry>
  
</feed>
