<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | fizwidget]]></title>
  <link href="http://fizwidget.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-06T10:16:33+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implicit Futures]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/06/implicit-futures/"/>
    <updated>2014-07-06T02:20:05+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/06/implicit-futures</id>
    <content type="html"><![CDATA[<p>It&rsquo;s so damn easy in Ruby.</p>

<p>``` ruby
class Future
  def initialize(&amp;block)</p>

<pre><code>@thread = Thread.new { block.call }
</code></pre>

<p>  end</p>

<p>  def method_missing(name, *args, &amp;block)</p>

<pre><code>@thread.value.send(name, *args, &amp;block)
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yay Ruby!]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/05/yay-ruby/"/>
    <updated>2014-07-05T22:10:23+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/05/yay-ruby</id>
    <content type="html"><![CDATA[<p>Python and Ruby are the two heavyweights in the general-purpose, high-level, dynamic language category. They&rsquo;re both awesome languages, but given the choice, I&rsquo;ll generally go with Ruby. This is my attempt at explaining why.</p>

<!-- more -->


<h2>Ruby is consistently object-oriented</h2>

<p>Pretty much everything we do in Ruby involves calling methods on objects:</p>

<p><code>ruby
-42.abs               # =&gt; 42
[1, 2, 3].length      # =&gt; 3
[1, 2, 3].reverse     # =&gt; [3, 2, 1]
[1, 2, 3].reverse!    # Reverses list in-place.
[1, 2, 3].min         # =&gt; 1
"foo".capitalize      # =&gt; "Foo"
File.new("bar")       # =&gt; File object
file.close            # Closes file object.
</code></p>

<p>In Python though, we use a mixture of functions and methods:</p>

<p><code>python
abs(-42)              # =&gt; 42
len([1, 2, 3])        # =&gt; 3
reversed([1, 2, 3])   # =&gt; [3, 2, 1]
[1, 2, 3].reverse()   # Reverses list in-place.
min([1, 2, 3])        # =&gt; 1
"foo".capitalize()    # =&gt; "Foo"
open("bar")           # =&gt; File object
file.close()          # Closes file object.
</code></p>

<p>One of the benefits of Ruby&rsquo;s consistency is that we can always read it left-to-right:</p>

<p><code>ruby
"world hello".split.reverse.join(' ') # =&gt; "hello world"
</code></p>

<p>The equivalent Python code is much harder to make sense of:</p>

<p><code>python
' '.join(reversed("world hello".split())) # =&gt; "hello world"
</code></p>

<p>We have to read some parts left-to-right and other parts inside-out. Yuk.</p>

<h2>Blocks are brilliant</h2>

<p>One of Ruby&rsquo;s best features is the really nice syntax it has for passing anonymous functions (&ldquo;blocks&rdquo;) as arguments to methods. Blocks are like Python&rsquo;s lambda expressions, only more elegant, more powerful, and more commonly used.</p>

<p>Blocks allow us to perform many different tasks using a simple, uniform syntax. For example:</p>

<p><code>ruby
[1, 2, 3].each   { |x| puts x }         # Iteration using blocks.
File.open('n')   { |f| puts f.read }    # Automatic resource management using blocks.
[1, 2, 3].select { |x| x &gt; 2 }          # List processing using blocks.
data.sort_by     { |x| x[1] }           # Sorting using blocks.
files.lazy.map   { |f| Image.new(f) }   # Lazy evaluation using blocks.
</code></p>

<p>In Python, we use no fewer than five different language constructs to perform the same tasks:</p>

<p><code>python
for x in [1, 2, 3]: print(x)            # Iteration using 'for'.
with f as open('n'): print(f.read())    # Automatic resource management using 'with'.
[x for x in [1, 2, 3] if x &gt; 2]         # List processing using list comprehensions.
sorted(data, key=lambda x: x[1])        # Sorting using 'lambda'.
(Image(f) for f in files)               # Lazy evaluation using generator expressions.
</code></p>

<p>In my book, one flexible construct > multiple rigid constructs.</p>

<h2>Clear conditionals</h2>

<p>Pretty much everything with a length/size/magnitude of zero evaluates to false in Python. This isn&rsquo;t just a quirk of the language, it&rsquo;s promoted in <a href="http://legacy.python.org/dev/peps/pep-0008/">PEP 8</a> as the Pythonic way of doing things.</p>

<p>``` python
if not some_collection:</p>

<pre><code># Whatever happened to "explicit is better than implicit"??
</code></pre>

<p>```</p>

<p>In Ruby, <code>false</code> and <code>nil</code> are the only values that evaluate to false. This means we have to explicitly ask objects questions:</p>

<p><code>ruby
if some_collection.empty?
  # Obvious meaning is obvious.
end
</code></p>

<p>Ruby&rsquo;s approach seems both more readable and less error-prone.</p>

<h2>Private parts</h2>

<p>In Ruby, instance variables are private by default. This encourages proper encapsulation of implementation details.</p>

<p>``` ruby
class Foo
  def initialize</p>

<pre><code>@secret = 42
</code></pre>

<p>  end
end</p>

<p>Foo.new.secret # => Error!
```</p>

<p>In Python though, everything defaults to public. This means we&rsquo;re more likely to end up with dependencies on implementation details.</p>

<p>``` python
class Foo:</p>

<pre><code>def __init__(self):
    self.not_so_secret = 42
</code></pre>

<p>Foo().not_so_secret # => 42
```</p>

<h2>Ruby is pretty</h2>

<p>OK, I&rsquo;ll admit this is ever so slightly subjective. Having said that, compare this:</p>

<p>``` ruby
class Person
  def initialize(age)</p>

<pre><code>@age = age
</code></pre>

<p>  end</p>

<p>  def to_s</p>

<pre><code>"Person is #{@age} years old."
</code></pre>

<p>  end
end</p>

<p>person = Person.new(34)
puts person</p>

<p>```</p>

<p>To this:</p>

<p>``` python
class Person(object):</p>

<pre><code>def __init__(self, age):
    self.age = age

def __str__(self):
    return "Person is {} years old.".format(self.age)
</code></pre>

<p>person = Person(34)
print(person)
```</p>

<p>The Ruby code has fewer parentheses, colons, and underscores, and doesn&rsquo;t need to specify <code>object</code>, <code>self</code>, or <code>return</code>.</p>

<h2>Conclusion</h2>

<p>So that&rsquo;s why I like Ruby. Admittedly this was a rather one sided comparison &ndash; Ruby has plenty of issues and Python plenty of benefits that I neglected to mention. Perhaps that&rsquo;ll be the topic of a future post.</p>
]]></content>
  </entry>
  
</feed>
