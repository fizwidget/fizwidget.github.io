<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Partial Application | fizwidget]]></title>
  <link href="http://fizwidget.github.io/blog/categories/partial-application/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-05T17:35:02+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nothin' but Single-Argument Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/04/nothin-but-single-argument-functions/"/>
    <updated>2014-07-04T09:17:13+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/04/nothin-but-single-argument-functions</id>
    <content type="html"><![CDATA[<p>In a <a href="/blog/2014/07/03/nothin-but-functions/">previous post</a>, I talked about the fact that functions are the only thing a language needs to be Turing-complete. In this post I&rsquo;ll take it a little further: <em>single-argument functions</em> are all a language needs to be Turing-complete.</p>

<p>At first glance this seems counter-intuitive. Surely there are a <em>lot</em> of things we wouldn&rsquo;t be able to do&hellip;adding two numbers, comparing two strings, searching for a number in a list, etc. These functions would all require more than one argument.</p>

<!-- more -->


<p>If you read my previous post on functions, you might be thinking we could pass around linked lists to simulate multiple arguments. There&rsquo;s one problem with that though&hellip;the <code>make_list</code> function accepts two arguments. We can&rsquo;t use a function that takes multiple arguments to implement multi-argument functions. That&rsquo;d be assuming what we want to prove.</p>

<h2>Closures to the rescue</h2>

<p>Remember closures? In addition to their arguments, they can access variables from their enclosing scope. Turns out we can use this ability to simulate multi-argument functions. Let&rsquo;s try writing a function to concatenate two strings:</p>

<p>``` python
def concatenate(a):
  def concatenate_aux(b):</p>

<pre><code>return a + b
</code></pre>

<p>  return concatenate_aux</p>

<p>concatenate(&ldquo;Hello&rdquo;)(&ldquo;World&rdquo;) # => &ldquo;HelloWorld&rdquo;
```</p>

<p><em>(Ignore the fact that I&rsquo;ve implemented concatenation with <code>+</code>, which is essentially a multi-argument function. That&rsquo;s just for brevity.)</em></p>

<p>Tada! The top-level <code>concatenate</code> function returns another function, which returns the final result when called. The <code>concatenate_aux</code> function is a closure, meaning it still has access to <code>a</code> when we call it later on.</p>

<p>So, we can decompose an n-argument function into a series of n nested single-argument functions (this is known as <a href="http://en.wikipedia.org/wiki/Currying">currying</a>).</p>

<p>This opens up another interesting possibility&hellip;</p>

<h2>Partial function application</h2>

<p>If a function takes n arguments, we usually have to call it with n arguments &ndash; anything less results in an error. If we define functions like we did above though, we can <em>partially apply</em> them:</p>

<p><code>python
greet = concatenate("Hello, ")
</code></p>

<p>We&rsquo;ve now got a new function (an instance of <code>concatenate_aux</code>) that will prepend <code>"Hello, "</code> to whatever we give it:</p>

<p><code>python
greet("Fred") # =&gt; "Hello, Fred"
greet("Bob")  # =&gt; "Hello, Bob"
</code></p>

<p>This can actually be a useful technique. The way we did it above is kinda messy, but Python has a <a href="https://docs.python.org/3/library/functools.html#functools.partial">library function</a> to simplify the process. In some languages (e.g. Haskell) any function can be partially applied &ndash; no extra work needed.</p>

<h2>Conclusion</h2>

<ul>
<li>Single-argument functions are all a language needs to be Turing-complete.</li>
<li>Partial function application lets us build specialised functions out of more general ones.</li>
</ul>

]]></content>
  </entry>
  
</feed>
