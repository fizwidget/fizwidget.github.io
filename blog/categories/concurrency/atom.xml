<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Concurrency | fizwidget]]></title>
  <link href="http://fizwidget.github.io/blog/categories/concurrency/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-07T13:56:08+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implicit Futures in Ruby]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/06/implicit-futures-in-ruby/"/>
    <updated>2014-07-06T02:20:05+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/06/implicit-futures-in-ruby</id>
    <content type="html"><![CDATA[<p>Say we&rsquo;re writing a program that performs several time-consuming operations, like network requests, disk accesses, or complex calculations. We want them to execute concurrently, but we also want our code to remain simple and easy to understand. There are many ways of approaching this problem, but in this post I&rsquo;ll focus on <em>implicit futures</em> and how they can be implemented in Ruby.</p>

<!-- more -->


<p>This snippet of code demonstrates the scenario we&rsquo;re dealing with:</p>

<p>``` ruby
a = foo.expensive_call_1
b = bar.expensive_call_2
c = baz.expensive_call_3</p>

<p>other_stuff</p>

<p>result = a + (b * c)
```</p>

<p>We perform one or more time-consuming operations, potentially do some other things, then use the results of the operations.</p>

<p>In the code above, the expensive calls are executed sequentially. This can lead to <em>very</em> poor performance &ndash; for example, the CPU might be forced to sit completely idle while a network request completes. Additionally, the call to <code>other_stuff</code> won&rsquo;t begin running until all three of the previous calls have finished, even though it doesn&rsquo;t depend on their results.</p>

<p>This is the solution we&rsquo;re working towards:</p>

<p>``` ruby
a = future { foo.expensive_call_1 }
b = future { bar.expensive_call_2 }
c = future { baz.expensive_call_3 }</p>

<p>other_stuff</p>

<p>result = a + (b * c)
```</p>

<p>(<em>If you&rsquo;re unfamiliar with Ruby, <code>foo { bar }</code> is equivalent to <code>foo(lambda: bar())</code> in Python</em>)</p>

<p>The expensive calls are now executed asynchronously, and <code>other_stuff</code> can begin running immediately. If line 7 is reached before all three results have been calculated, the main thread will automatically block and wait for them to finish.</p>

<p>Neat! How on Earth do we implement this though&hellip;? At first glance, it might seem like we&rsquo;d need to build it into the language itself. As we&rsquo;ll see though, it&rsquo;s actually quite easy to implement in dynamic languages like Ruby and Python.</p>

<h2>Ruby&rsquo;s thread class</h2>

<p>It turns out that Ruby&rsquo;s <code>Thread</code> class does a lot of the work for us. Here&rsquo;s a quick primer on it:</p>

<p><code>ruby
t = Thread.new { 2 + 2 }
t.value # =&gt; 4
</code></p>

<p><code>Thread.new</code> spawns a thread to execute the code block, and <code>t.value</code> returns the thread&rsquo;s result (it waits for the thread to finish running if necessary).</p>

<p>This <em>almost</em> gets us where we want to be. Let&rsquo;s rewrite our original code using the <code>Thread</code> class:</p>

<p>``` ruby
a = Thread.new { foo.expensive_call_1 }
b = Thread.new { bar.expensive_call_2 }
c = Thread.new { baz.expensive_call_3 }</p>

<p>other_stuff</p>

<p>puts a.value + (b.value * c.value)
```</p>

<p>Notice that we have to explicitly retrieve the results by calling the <code>value</code> method on <code>a</code>, <code>b</code>, and <code>c</code>. This isn&rsquo;t quite what we&rsquo;re after &ndash; these are <em>explicit</em> futures rather than <em>implicit</em> ones.</p>

<p>This mightn&rsquo;t seem like much of an issue&hellip;calling <code>value</code> isn&rsquo;t exactly difficult. Consider this though: what if we wanted to pass <code>a</code>, <code>b</code>, or <code>c</code> into other functions or methods, or return them as results? Things would start getting messy, because every piece of code that touches them would need to know that they&rsquo;re explicit futures.</p>

<p>This is why implicit futures are so nice &ndash; the code that uses them can remain blissfully ignorant of the fact that they&rsquo;re futures. If <code>a</code> were an implicit future representing a result of type <code>String</code>, we could freely pass it around to any piece of code that works with strings. Everything would continue executing asynchronously until someone actually tried to call a method on it. If the future hadn&rsquo;t finished executing yet, the calling code would automatically block until the result became available.</p>

<h2>Transparent proxy objects</h2>

<p>To summarise what we&rsquo;re trying to achieve, we want to be able to treat <code>a</code> as though it were the result of the computation:</p>

<p><code>ruby
a = future { some_computation }
</code></p>

<p>We don&rsquo;t want to have to explicitly retrieve the result by calling <code>a.value</code>.</p>

<p>To achieve this, we want <code>a</code> to be a <em>transparent proxy object</em>. A transparent proxy is a wrapper around an object that forwards all method calls to the object it&rsquo;s wrapping. Looking at it from the outside, it would appear as though it were the wrapped object (in our case <code>a</code> would act as though it were the result, even though it would actually be an implicit future).</p>

<p>It&rsquo;s not immediately obvious how a transparent proxy could be implemented, but it&rsquo;s actually very easy in Ruby. Ruby allows us to define a special method called <code>method_missing</code>, which gets called automatically if an object can&rsquo;t otherwise respond to a method.</p>

<p>Here&rsquo;s a quick demo:</p>

<p>``` ruby
class Useless
  def method_missing(name, *args, &amp;block)</p>

<pre><code>puts "Someone called the '#{name}' method on me!"
puts "I was given arguments: #{args}"
puts "Now let's call the block I was given..."
block.call
</code></pre>

<p>  end
end</p>

<p>well = Useless.new
well.this_is_weird!(&ldquo;yup&rdquo;) { puts &ldquo;I don&rsquo;t even&hellip;&rdquo; }
```</p>

<p>Running this code produces the following output:</p>

<p><code>plain
Someone called the 'well_this_is_weird!' method on me!
I was given arguments: ["yup"]
Now let's call the block I was given...
I don't even...
</code></p>

<p>We can use <code>method_missing</code> to make a transparent proxy:</p>

<p>``` ruby
class TransparentProxy
  def initialize(target)</p>

<pre><code>@target = target
</code></pre>

<p>  end</p>

<p>  def method_missing(name, *args, &amp;block)</p>

<pre><code>@target.send(name, *args, &amp;block)
</code></pre>

<p>  end
end</p>

<p>proxy = TransparentProxy.new(&ldquo;I&rsquo;m being wrapped by the proxy!&rdquo;)
proxy.reverse # => &ldquo;!yxorp eht yb depparw gnieb m'I&rdquo;
```</p>

<p>We&rsquo;re able to treat <code>proxy</code> as though it were a string. The call to <code>reverse</code> was intercepted by <code>method_missing</code>, then forwarded to the wrapped string object.</p>

<h2>Implementing implicit futures</h2>

<p>Using the building blocks described above, we can write a <code>Future</code> class that:</p>

<ol>
<li>Uses a <code>Thread</code> to:

<ul>
<li>Asynchronously execute a block of code.</li>
<li>Block execution if we attempt to use the result before it&rsquo;s available.</li>
</ul>
</li>
<li>Acts as a transparent proxy, forwarding all methods calls to the thread&rsquo;s result.</li>
</ol>


<p>The code for this ends up being surprisingly simple:</p>

<p>``` ruby
class Future
  def initialize(&amp;block)</p>

<pre><code>@thread = Thread.new { block.call }
</code></pre>

<p>  end</p>

<p>  def method_missing(name, *args, &amp;block)</p>

<pre><code>@thread.value.send(name, *args, &amp;block)
</code></pre>

<p>  end
end
```</p>

<p>To make it slightly easier to use, we&rsquo;ll define standalone <code>future</code> function that creates and returns a <code>Future</code> object:</p>

<p><code>ruby
def future(&amp;block)
  Future.new(&amp;block)
end
</code></p>

<p>We can then use it as follows:</p>

<p><code>ruby
f = future { expensive_call }
</code></p>

<p>This looks exactly like what we set out to achieve &ndash; yay! Might be a good idea to check if it works though&hellip;</p>

<h2>Testing time!</h2>

<p>Let&rsquo;s start with a sanity-check&hellip;</p>

<p>``` ruby
f = future do
  puts &ldquo;Future: Started.&rdquo;
  sleep(4)
  puts &ldquo;Future: Finished.&rdquo;
  &ldquo;yeeeeaaaaaaaahh&rdquo;
end</p>

<p>sleep(2)</p>

<p>puts &ldquo;Attempting to use the result&hellip;&rdquo;
puts f.upcase
```</p>

<p>The future should begin executing immediately, and the main thread should be forced to wait couple of seconds before it can access the result. Here&rsquo;s the output we get:</p>

<p><code>plain
Future: Started.
Attempting to use the result...
Future: Finished.
YEEEEAAAAAAAAHH
</code></p>

<p>It worked!</p>

<p>Now let&rsquo;s try a real-world example. We&rsquo;ll download a bunch of webpages and report how long it took, with and without futures:</p>

<p>``` ruby
require &lsquo;benchmark&rsquo;
require &lsquo;open-uri&rsquo;</p>

<p>urls = [
  &ldquo;<a href="https://www.google.com">https://www.google.com</a>&rdquo;, &ldquo;<a href="https://www.microsoft.com">https://www.microsoft.com</a>&rdquo;, &ldquo;<a href="http://www.abc.net.au">http://www.abc.net.au</a>&rdquo;,
  &ldquo;<a href="http://www.reddit.com">http://www.reddit.com</a>&rdquo;, &ldquo;<a href="https://www.atlassian.com">https://www.atlassian.com</a>&rdquo;, &ldquo;<a href="https://www.duckduckgo.com">https://www.duckduckgo.com</a>&rdquo;,
  &ldquo;<a href="https://www.facebook.com">https://www.facebook.com</a>&rdquo;, &ldquo;<a href="https://www.ruby-lang.org">https://www.ruby-lang.org</a>&rdquo;, &ldquo;<a href="http://whirlpool.net.au">http://whirlpool.net.au</a>&rdquo;,
  &ldquo;<a href="https://bitbucket.org">https://bitbucket.org</a>&rdquo;, &ldquo;<a href="https://github.com">https://github.com</a>&rdquo;, &ldquo;<a href="https://news.ycombinator.com">https://news.ycombinator.com</a>&rdquo;
]</p>

<p>def with_futures(urls)
  pages = urls.map do |url|</p>

<pre><code>future { open(url) { |f| f.read } }
</code></pre>

<p>  end
  pages.map { |page| page.length }
end</p>

<p>def without_futures(urls)
  pages = urls.map do |url|</p>

<pre><code>open(url) { |f| f.read }
</code></pre>

<p>  end
  pages.map { |page| page.length }
end</p>

<p>Benchmark.bm do |b|
  b.report { with_futures(urls) }
  b.report { without_futures(urls) }
end
```</p>

<p>The results:</p>

<p>``` plain</p>

<pre><code>   user     system      total        real
</code></pre>

<p>   0.160000   0.040000   0.200000 (  2.561927)
   0.110000   0.030000   0.140000 ( 13.774315)
```</p>

<p>Using futures resulted in a big speed-up: 13.8 seconds down to 2.6 seconds. Brilliant!</p>

<h2>Caveats</h2>

<p>The above code isn&rsquo;t exactly production-ready. If you were using this in a real project, you&rsquo;d want the <code>Future</code> class to:</p>

<ul>
<li>Capture exceptions that occur during the computation and re-throw them when the result is accessed.</li>
<li>Inherit from <code>BasicObject</code> instead of <code>Object</code> (so methods defined on <code>Object</code> are forwarded to the result).</li>
<li>Use a thread-pool to prevent the system from being overloaded by a large number of threads.</li>
<li>Probably a bunch of other things I haven&rsquo;t thought of.</li>
</ul>


<h2>Conclusion</h2>

<p>Futures are awesome. Ruby is awesome.</p>
]]></content>
  </entry>
  
</feed>
