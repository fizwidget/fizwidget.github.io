<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Turing Complete | fizwidget]]></title>
  <link href="http://fizwidget.github.io/blog/categories/turing-complete/atom.xml" rel="self"/>
  <link href="http://fizwidget.github.io/"/>
  <updated>2014-07-05T15:58:44+09:30</updated>
  <id>http://fizwidget.github.io/</id>
  <author>
    <name><![CDATA[James Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nothin' but Single-Argument Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/04/nothin-but-single-argument-functions/"/>
    <updated>2014-07-04T09:17:13+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/04/nothin-but-single-argument-functions</id>
    <content type="html"><![CDATA[<p>In a <a href="/blog/2014/07/03/nothin-but-functions/">previous post</a>, I talked about the fact that functions are the only thing a language needs to be Turing-complete. In this post I&rsquo;m going to take it a little further: <em>single-argument functions</em> are all a language needs to be Turing-complete.</p>

<p>At first glance that seems weird. Surely there are a <em>lot</em> of things this would prevent us from doing&hellip;adding two numbers, comparing two strings, searching for a number in a list, etc. These functions would all require more than one argument.</p>

<!-- more -->


<p>If you read my previous post, you might be thinking of passing a linked list to simulate multiple arguments. There&rsquo;s one problem with that though&hellip;the <code>make_list</code> function accepts two arguments. We can&rsquo;t use a function that takes multiple arguments to implement multi-argument functions. That&rsquo;d be assuming what we want to prove :P</p>

<h2>Closures come to the rescue</h2>

<p>Remember closures? In addition to their arguments, they can access variables from their enclosing scope. We can use this ability to simulate multi-argument functions. Let&rsquo;s try writing a function function to concatenate two strings:</p>

<p>``` python
def concatenate(a):
  def concatenate_aux(b):</p>

<pre><code>return a + b
</code></pre>

<p>  return concatenate_aux</p>

<p>concatenate(&ldquo;Hello&rdquo;)(&ldquo;World&rdquo;) # => &ldquo;HelloWorld&rdquo;
```</p>

<p>Tada! The top-level <code>add</code> function returns another function, which will in-turn return the final result. The <code>concatenate_aux</code> function is a closure, meaning it still has access to <code>a</code> when we call it later on.</p>

<p>So, we can decompose an n-argument function into a series of n nested single-argument functions (a process known as <a href="http://en.wikipedia.org/wiki/Currying">currying</a>).</p>

<p>This opens up an interesting possibility&hellip;</p>

<h2>Partial application</h2>

<p>Typically, if a function takes n arguments, you have to call it with n arguments. Anything less results in an error. If we define functions like we did above though, we can <em>partially apply</em> them:</p>

<p><code>python
greet = concatenate("Hello, ")
</code></p>

<p>We&rsquo;ve now got a new function (an instance of <code>concatenate_aux</code>) that will prepend <code>"Hello, "</code> to whatever we give it:</p>

<p><code>python
greet("Fred") # =&gt; "Hello, Fred"
greet("Bob")  # =&gt; "Hello, Bob"
</code></p>

<h2>Conclusion</h2>

<p>So, single-argument functions are all a language needs to be Turing-complete. Neat, but not very practical.</p>

<p>Partial application on the other hand is actually a useful technique. Not so much in Python (due to the messy way we&rsquo;d have to define functions) but some languages make it really easy. In Haskell we can partially apply any function, without having to to through the hassle of defining them in a weird way. This lets us build specialised functions from more general ones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nothin' but Functions]]></title>
    <link href="http://fizwidget.github.io/blog/2014/07/03/nothin-but-functions/"/>
    <updated>2014-07-03T16:59:34+09:30</updated>
    <id>http://fizwidget.github.io/blog/2014/07/03/nothin-but-functions</id>
    <content type="html"><![CDATA[<p>Imagine we&rsquo;re using a programming language that doesn&rsquo;t give us any way of defining data structures. No arrays, no structs, no classes. Nothing. All we can do is define and call functions.</p>

<p>We need to work with a collection of items. Are we screwed?</p>

<!-- more -->


<h2>A list made of functions</h2>

<p>Turns out the answer is no. We can create linked lists, quite literally, out of functions:</p>

<p>``` python
def make_list(head, tail):
  def node(operation):</p>

<pre><code>if operation == "head":
  return head
elif operation == "tail":
  return tail
</code></pre>

<p>  return node
```</p>

<p>The <code>make_list</code> function accepts a <code>head</code> (the data item we want to store), and a <code>tail</code> (the rest of the linked list). We can use it to construct the list <code>[1, 2, 3]</code> as follows:</p>

<p><code>python
items = make_list(1, make_list(2, make_list(3, None)))
</code></p>

<p>When we call <code>make_list</code>, it returns an instance of the <code>node</code> function. This function accepts a single argument and returns the head or the tail based on the value of that argument.</p>

<p>Let&rsquo;s give it a try:</p>

<p><code>python
items("head")                 # =&gt; 1
items("tail")                 # =&gt; &lt;function node at 0x107a82b18&gt;
items("tail")("head")         # =&gt; 2
items("tail")("tail")("head") # =&gt; 3
items("tail")("tail")("tail") # =&gt; None
</code></p>

<p>Neat! That&rsquo;s a bit tedious though, so let&rsquo;s write a function to print the list:</p>

<p>``` python
def print_list(items):
  if items:</p>

<pre><code>print(items("head"))
print_list(items("tail"))
</code></pre>

<p>print_list(items)
```</p>

<p>As you&rsquo;d expect, this prints out 1 2 3.</p>

<h2>Closures</h2>

<p>A closure is a function that has access to the variables from the scope it was defined in. The <code>node</code> function is a good example of this: it accesses <code>head</code> and <code>tail</code>. These variables aren&rsquo;t explicitly passed in as arguments, but <code>node</code> can access them all the same. Each time we call <code>make_list</code>, a new instance of <code>node</code> is returned that references the new <code>head</code> and <code>tail</code> arguments.</p>

<p>Our list is nothing more than a chain of nested closures. When we call the outermost closure and pass it <code>"tail"</code> as an argument, it returns the next closure in the chain (i.e. the next node in the list).</p>

<h2>Conclusion</h2>

<p>We&rsquo;ve really just scratched the surface here &ndash; it&rsquo;s not hard to see that we could create more complex data structures using similar techniques. We could even use functions to define <em>numbers</em> by representing the nth integer as a series of n nested functions.</p>

<p>This all hints at a deeper fact: if a language allows you to define and apply functions, that language is Turing-complete (meaning it lets you compute anything that can be computed). The <a href="http://palmstroem.blogspot.com.au/2012/05/lambda-calculus-for-absolute-dummies.html">lambda calculus</a> is the canonical example of such a language.</p>

<p>Neat, huh?</p>
]]></content>
  </entry>
  
</feed>
